   1               		.file	"MedCon.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 0D0A 0A47 		.string	"\r\n\nGame Over.\r\n"
  12      616D 6520 
  12      4F76 6572 
  12      2E0D 0A00 
  13               		.section	.text.startup,"ax",@progbits
  14               	.global	main
  16               	main:
  17               	.LFB6:
  18               		.file 1 "MedCon.c"
   1:MedCon.c      **** //GPS clock main programme function.
   2:MedCon.c      **** 
   3:MedCon.c      **** # include <MedCon_Support.h>
   4:MedCon.c      **** 
   5:MedCon.c      **** int main(void)
   6:MedCon.c      **** {
  19               		.loc 1 6 0
  20               		.cfi_startproc
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
   7:MedCon.c      **** 	initClock();							//Initialise the system clock.
  25               		.loc 1 7 0
  26 0000 0E94 0000 		call initClock
  27               	.LVL0:
   8:MedCon.c      **** 	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
  28               		.loc 1 8 0
  29 0004 0E94 0000 		call initUSART
  30               	.LVL1:
   9:MedCon.c      **** 	printString("\r\n\nGame Over.\r\n");	//Initialisation test for USART.
  31               		.loc 1 9 0
  32 0008 80E0      		ldi r24,lo8(.LC0)
  33 000a 90E0      		ldi r25,hi8(.LC0)
  34 000c 0E94 0000 		call printString
  35               	.LVL2:
  10:MedCon.c      **** 	
  11:MedCon.c      **** 	
  12:MedCon.c      **** 	sei();									//Global enable interrupts (from avr/interrupt.h)
  36               		.loc 1 12 0
  37               	/* #APP */
  38               	 ;  12 "MedCon.c" 1
  39 0010 7894      		sei
  40               	 ;  0 "" 2
  13:MedCon.c      **** 
  14:MedCon.c      **** 
  15:MedCon.c      **** 
  16:MedCon.c      **** 	DDRD |= (1 << PD0);	//Set PD0 to output.
  41               		.loc 1 16 0
  42               	/* #NOAPP */
  43 0012 509A      		sbi 0xa,0
  17:MedCon.c      **** 
  18:MedCon.c      **** 	while (1)
  19:MedCon.c      **** 	{	
  20:MedCon.c      **** 		PORTD ^= (1 << PD0);	//XOR bit PD0 (i.e. toggle).
  44               		.loc 1 20 0
  45 0014 91E0      		ldi r25,lo8(1)
  46               	.L2:
  47               		.loc 1 20 0 is_stmt 0 discriminator 1
  48 0016 8BB1      		in r24,0xb
  49 0018 8927      		eor r24,r25
  50 001a 8BB9      		out 0xb,r24
  51               	.LVL3:
  52               	.LBB4:
  53               	.LBB5:
  54               		.file 2 "g:\\projects\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:g:\projects\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:g:\projects\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
   6:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:g:\projects\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
   9:g:\projects\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:g:\projects\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  12:g:\projects\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:g:\projects\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:g:\projects\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:g:\projects\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  17:g:\projects\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:g:\projects\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:g:\projects\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  21:g:\projects\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:g:\projects\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:g:\projects\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:g:\projects\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:g:\projects\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:g:\projects\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:g:\projects\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:g:\projects\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:g:\projects\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:g:\projects\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:g:\projects\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  33:g:\projects\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  35:g:\projects\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:g:\projects\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  38:g:\projects\winavr-20100110\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:g:\projects\winavr-20100110\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:g:\projects\winavr-20100110\avr\include\util\delay.h **** #endif
  41:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  42:g:\projects\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  43:g:\projects\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:g:\projects\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  45:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  46:g:\projects\winavr-20100110\avr\include\util\delay.h **** /** \file */
  47:g:\projects\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:g:\projects\winavr-20100110\avr\include\util\delay.h ****     \code
  49:g:\projects\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:g:\projects\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:g:\projects\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  52:g:\projects\winavr-20100110\avr\include\util\delay.h ****     \endcode
  53:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  54:g:\projects\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:g:\projects\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:g:\projects\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:g:\projects\winavr-20100110\avr\include\util\delay.h ****     used.
  58:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  59:g:\projects\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:g:\projects\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:g:\projects\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:g:\projects\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:g:\projects\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:g:\projects\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:g:\projects\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:g:\projects\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  68:g:\projects\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:g:\projects\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:g:\projects\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:g:\projects\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:g:\projects\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:g:\projects\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:g:\projects\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:g:\projects\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  76:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  77:g:\projects\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:g:\projects\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:g:\projects\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  81:g:\projects\winavr-20100110\avr\include\util\delay.h **** */
  82:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  83:g:\projects\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:g:\projects\winavr-20100110\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:g:\projects\winavr-20100110\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:g:\projects\winavr-20100110\avr\include\util\delay.h **** #endif
  87:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  88:g:\projects\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  89:g:\projects\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:g:\projects\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:g:\projects\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:g:\projects\winavr-20100110\avr\include\util\delay.h **** #endif
  93:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  94:g:\projects\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:g:\projects\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:g:\projects\winavr-20100110\avr\include\util\delay.h **** #endif
  97:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
  98:g:\projects\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:g:\projects\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:g:\projects\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:g:\projects\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 102:g:\projects\winavr-20100110\avr\include\util\delay.h **** #endif
 103:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 104:g:\projects\winavr-20100110\avr\include\util\delay.h **** /**
 105:g:\projects\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 106:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 107:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 109:g:\projects\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:g:\projects\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 112:g:\projects\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 114:g:\projects\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:g:\projects\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:g:\projects\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:g:\projects\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:g:\projects\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 120:g:\projects\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:g:\projects\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:g:\projects\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:g:\projects\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 125:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:g:\projects\winavr-20100110\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:g:\projects\winavr-20100110\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 129:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:g:\projects\winavr-20100110\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 132:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:g:\projects\winavr-20100110\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:g:\projects\winavr-20100110\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:g:\projects\winavr-20100110\avr\include\util\delay.h ****    Also, the backward compatible
 136:g:\projects\winavr-20100110\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:g:\projects\winavr-20100110\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:g:\projects\winavr-20100110\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 140:g:\projects\winavr-20100110\avr\include\util\delay.h ****  */
 141:g:\projects\winavr-20100110\avr\include\util\delay.h **** void
 142:g:\projects\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:g:\projects\winavr-20100110\avr\include\util\delay.h **** {
 144:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ; 
 145:g:\projects\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:g:\projects\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:g:\projects\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 152:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:g:\projects\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 155:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:g:\projects\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 158:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	#else
 159:g:\projects\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 160:g:\projects\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	#endif
 162:g:\projects\winavr-20100110\avr\include\util\delay.h **** 
 163:g:\projects\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  55               		.loc 2 163 0 is_stmt 1 discriminator 1
  56 001c 2FEF      		ldi r18,lo8(3199999)
  57 001e 33ED      		ldi r19,hi8(3199999)
  58 0020 80E3      		ldi r24,hlo8(3199999)
  59 0022 2150      		1: subi r18,1
  60 0024 3040      		sbci r19,0
  61 0026 8040      		sbci r24,0
  62 0028 01F4      		brne 1b
  63 002a 00C0      		rjmp .
  64 002c 0000      		nop
  65 002e 00C0      		rjmp .L2
  66               	.LBE5:
  67               	.LBE4:
  68               		.cfi_endproc
  69               	.LFE6:
  71               		.text
  72               	.Letext0:
  73               		.file 3 "g:\\projects\\winavr-20100110\\avr\\include\\stdint.h"
  74               		.file 4 "./MedCon_Support.h"
  75               		.file 5 "./USART.h"
DEFINED SYMBOLS
                            *ABS*:00000000 MedCon.c
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:2      *ABS*:0000003e __SP_H__
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:3      *ABS*:0000003d __SP_L__
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:4      *ABS*:0000003f __SREG__
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Jadonis\AppData\Local\Temp\ccUCixcF.s:16     .text.startup:00000000 main

UNDEFINED SYMBOLS
initClock
initUSART
printString
__do_copy_data
