
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000010a8  0000113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800130  00800130  0000116c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f6f  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013b6  00000000  00000000  000063c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000311d  00000000  00000000  00007779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000814  00000000  00000000  0000a898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f88  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000323f  00000000  00000000  0000d034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000498  00000000  00000000  00010273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	97 c0       	rjmp	.+302    	; 0x130 <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__vector_9>
      26:	00 00       	nop
      28:	9e c0       	rjmp	.+316    	; 0x166 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c4       	rjmp	.+2082   	; 0x850 <__vector_11>
      2e:	00 00       	nop
      30:	9a c0       	rjmp	.+308    	; 0x166 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c0       	rjmp	.+256    	; 0x166 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c0       	rjmp	.+252    	; 0x166 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop

00000074 <__trampolines_end>:
      74:	00 ff       	sbrs	r16, 0
      76:	01 00       	.word	0x0001	; ????
      78:	01 00       	.word	0x0001	; ????
      7a:	00 ff       	sbrs	r16, 0
      7c:	ff 00       	.word	0x00ff	; ????
      7e:	00 01       	movw	r0, r0
      80:	00 01       	movw	r0, r0
      82:	ff 00       	.word	0x00ff	; ????

00000084 <ProductString>:
      84:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.
      94:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.
      a4:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00           r.o.l.l.e.r...

000000b2 <ManufacturerString>:
      b2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      c2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000cc <LanguageString>:
      cc:	04 03 09 04                                         ....

000000d0 <ConfigurationDescriptor>:
      d0:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      e0:	00 00 09 21 11 01 00 01 22 2c 00 07 05 81 03 08     ...!....",......
      f0:	00 05                                               ..

000000f2 <DeviceDescriptor>:
      f2:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
     102:	00 01                                               ..

00000104 <MediaControlReport>:
     104:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
     114:	09 b6 09 b7 0a cd 09 09 e2 09 e9 09 ea 75 01 95     .............u..
     124:	0b 15 00 25 01 81 06 95 05 81 01 c0                 ...%........

00000130 <__ctors_end>:
     130:	11 24       	eor	r1, r1
     132:	1f be       	out	0x3f, r1	; 63
     134:	cf ef       	ldi	r28, 0xFF	; 255
     136:	d2 e0       	ldi	r29, 0x02	; 2
     138:	de bf       	out	0x3e, r29	; 62
     13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
     13c:	11 e0       	ldi	r17, 0x01	; 1
     13e:	a0 e0       	ldi	r26, 0x00	; 0
     140:	b1 e0       	ldi	r27, 0x01	; 1
     142:	e8 ea       	ldi	r30, 0xA8	; 168
     144:	f0 e1       	ldi	r31, 0x10	; 16
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
     148:	05 90       	lpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a0 33       	cpi	r26, 0x30	; 48
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	a0 e3       	ldi	r26, 0x30	; 48
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a1 34       	cpi	r26, 0x41	; 65
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	7e d0       	rcall	.+252    	; 0x260 <main>
     164:	9f c7       	rjmp	.+3902   	; 0x10a4 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <__vector_9>:
 volatile uint8_t volUp = 0;		//volUp is a global variable - only set to 1 from within pin-change interrupt 0 subroutine (PCINT0_vect) and used in the USB mediareport.
 volatile uint8_t volDown = 0;	//volDown is a global variable - only set to 1 from within pin-change interrupt 0 subroutine (PCINT0_vect) and used in the USB mediareport.

 
 ISR(PCINT0_vect)
 {	 
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	2f 93       	push	r18
     174:	3f 93       	push	r19
     176:	4f 93       	push	r20
     178:	5f 93       	push	r21
     17a:	6f 93       	push	r22
     17c:	7f 93       	push	r23
     17e:	8f 93       	push	r24
     180:	9f 93       	push	r25
     182:	af 93       	push	r26
     184:	bf 93       	push	r27
     186:	ef 93       	push	r30
     188:	ff 93       	push	r31
	static uint8_t old_AB = 3;		//lookup table index
	static int8_t encval = 0;			//encoder value  
	static const int8_t enc_states [] PROGMEM = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0};  //encoder lookup table

	old_AB <<=2;  //remember previous state
     18a:	80 91 00 01 	lds	r24, 0x0100
     18e:	88 0f       	add	r24, r24
     190:	88 0f       	add	r24, r24
     192:	80 93 00 01 	sts	0x0100, r24
	old_AB |= ( (PINB >> 6) & 0x03 );
     196:	e3 b1       	in	r30, 0x03	; 3
     198:	e2 95       	swap	r30
     19a:	e6 95       	lsr	r30
     19c:	e6 95       	lsr	r30
     19e:	e3 70       	andi	r30, 0x03	; 3
     1a0:	e8 2b       	or	r30, r24
     1a2:	e0 93 00 01 	sts	0x0100, r30
	encval += pgm_read_byte(&(enc_states[( old_AB & 0x0f )]));
     1a6:	ef 70       	andi	r30, 0x0F	; 15
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	ec 58       	subi	r30, 0x8C	; 140
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	e4 91       	lpm	r30, Z
     1b0:	80 91 32 01 	lds	r24, 0x0132
     1b4:	e8 0f       	add	r30, r24
     1b6:	e0 93 32 01 	sts	0x0132, r30

	/* post "Navigation forward/reverse" event */
	if( encval > 1 ) //four steps forward
     1ba:	e2 30       	cpi	r30, 0x02	; 2
     1bc:	44 f0       	brlt	.+16     	; 0x1ce <__vector_9+0x66>
	{
		volUp = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	80 93 31 01 	sts	0x0131, r24
		encval = 0;
     1c4:	10 92 32 01 	sts	0x0132, r1
		printString("up\n\r");
     1c8:	81 e1       	ldi	r24, 0x11	; 17
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <__vector_9+0x78>
	}
	else if( encval < -1 )//four steps backwards
     1ce:	ef 3f       	cpi	r30, 0xFF	; 255
     1d0:	44 f4       	brge	.+16     	; 0x1e2 <__vector_9+0x7a>
	{
		volDown = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 30 01 	sts	0x0130, r24
		encval = 0;
     1d8:	10 92 32 01 	sts	0x0132, r1
		printString("dn\n\r");
     1dc:	86 e1       	ldi	r24, 0x16	; 22
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	97 d0       	rcall	.+302    	; 0x310 <printString>
	}

	HID_Device_USBTask(&MediaControl_HID_Interface);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	85 d6       	rcall	.+3338   	; 0xef2 <HID_Device_USBTask>
	USB_USBTask();
     1e8:	24 d5       	rcall	.+2632   	; 0xc32 <USB_USBTask>
	volUp = 0;
     1ea:	10 92 31 01 	sts	0x0131, r1
	volDown = 0;
     1ee:	10 92 30 01 	sts	0x0130, r1
 }
     1f2:	ff 91       	pop	r31
     1f4:	ef 91       	pop	r30
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     214:	84 b7       	in	r24, 0x34	; 52
     216:	87 7f       	andi	r24, 0xF7	; 247
     218:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     21a:	88 e1       	ldi	r24, 0x18	; 24
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	80 93 60 00 	sts	0x0060, r24
     224:	10 92 60 00 	sts	0x0060, r1
     228:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	80 e8       	ldi	r24, 0x80	; 128
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	80 93 61 00 	sts	0x0061, r24
     236:	90 93 61 00 	sts	0x0061, r25
     23a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
     23c:	fa d2       	rcall	.+1524   	; 0x832 <USB_Init>
	
	//Initialise USART for serial comms
	initUSART();
     23e:	50 d0       	rcall	.+160    	; 0x2e0 <initUSART>
	
	//Initialise interrupts - pin-change interrupt 0 to detect rotary encoder gray-code changes for volume control.
	PCICR |=  (1 << PCIE0);	//PCICR:Pin Change Interrupt Control Register, PCIE0: Pin Change Interrupt 0 Enable
     240:	e8 e6       	ldi	r30, 0x68	; 104
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	81 60       	ori	r24, 0x01	; 1
     248:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT7 | 1 << PCINT6);	//PCMSK0:Pin Change 0 Mask, PCINT7:6: Pin Change Interrupts 7 & 6
     24a:	eb e6       	ldi	r30, 0x6B	; 107
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	80 6c       	ori	r24, 0xC0	; 192
     252:	80 83       	st	Z, r24
	
	//IO setup.
	DDRD = 0;		//Inputs
     254:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;	//Pull-ups enabled
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0;		//Inputs
     25a:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;	//Pull-ups enabled
     25c:	85 b9       	out	0x05, r24	; 5
     25e:	08 95       	ret

00000260 <main>:
 /** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     260:	d9 df       	rcall	.-78     	; 0x214 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     262:	78 94       	sei

	GlobalInterruptEnable();
	
	//Test string for USART initialisation
	printString("\r\nMedia Controller\r\n");	
     264:	8b e1       	ldi	r24, 0x1B	; 27
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	53 d0       	rcall	.+166    	; 0x310 <printString>
	
	//Main loop - continuously polls USB functions (thanks LUFA!)
	while(1)
	{
		HID_Device_USBTask(&MediaControl_HID_Interface);
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	41 d6       	rcall	.+3202   	; 0xef2 <HID_Device_USBTask>
		USB_USBTask();
     270:	e0 d4       	rcall	.+2496   	; 0xc32 <USB_USBTask>
     272:	fb cf       	rjmp	.-10     	; 0x26a <main+0xa>

00000274 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&MediaControl_HID_Interface);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	29 d6       	rcall	.+3154   	; 0xecc <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     27a:	e2 ee       	ldi	r30, 0xE2	; 226
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	84 60       	ori	r24, 0x04	; 4
     282:	80 83       	st	Z, r24
     284:	08 95       	ret

00000286 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&MediaControl_HID_Interface);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	ee c4       	rjmp	.+2524   	; 0xc68 <HID_Device_ProcessControlRequest>

0000028c <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     28c:	80 91 0f 01 	lds	r24, 0x010F
     290:	90 91 10 01 	lds	r25, 0x0110
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	29 f0       	breq	.+10     	; 0x2a2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	90 93 10 01 	sts	0x0110, r25
     29e:	80 93 0f 01 	sts	0x010F, r24
     2a2:	08 95       	ret

000002a4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	f9 01       	movw	r30, r18
	MediaReport->FForward			= (false);
	MediaReport->Rewind			= (false);
	MediaReport->NextTrack		= (false);
	MediaReport->PreviousTrack	= (false);
	MediaReport->Stop				= (false);
	MediaReport->PlayPause		= (false);
     2aa:	10 82       	st	Z, r1
	MediaReport->Mute				= ((bit_is_clear(PIND, PD0 )) ? true : false);
     2ac:	99 b1       	in	r25, 0x09	; 9
     2ae:	90 95       	com	r25
     2b0:	81 81       	ldd	r24, Z+1	; 0x01
     2b2:	90 fb       	bst	r25, 0
     2b4:	80 f9       	bld	r24, 0
     2b6:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->VolumeUp		= volUp;		//volUp is a global variable - only set to 1 from within pin-change interrupt 0 subroutine (PCINT0_vect).
     2b8:	90 91 31 01 	lds	r25, 0x0131
     2bc:	90 fb       	bst	r25, 0
     2be:	81 f9       	bld	r24, 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->VolumeDown	= volDown;	//volDown is a global variable - only set to 1 from within pin-change interrupt 0 subroutine (PCINT0_vect).
     2c2:	90 91 30 01 	lds	r25, 0x0130
     2c6:	90 fb       	bst	r25, 0
     2c8:	82 f9       	bld	r24, 2
     2ca:	81 83       	std	Z+1, r24	; 0x01
	
	*ReportSize = sizeof(USB_MediaReport_Data_t);
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	f8 01       	movw	r30, r16
     2d2:	91 83       	std	Z+1, r25	; 0x01
     2d4:	80 83       	st	Z, r24
	return false;
}
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2de:	08 95       	ret

000002e0 <initUSART>:
uint8_t receiveByte(void)
{

	while (!(UCSR1A & (1 << RXC1))) {}		//Wait until the USART 0 receive complete flag is set 
	return UDR1;							//Returns received data.  UDR0 = USART 0 Data Register
}
     2e0:	10 92 cd 00 	sts	0x00CD, r1
     2e4:	87 e6       	ldi	r24, 0x67	; 103
     2e6:	80 93 cc 00 	sts	0x00CC, r24
     2ea:	e8 ec       	ldi	r30, 0xC8	; 200
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8d 7f       	andi	r24, 0xFD	; 253
     2f2:	80 83       	st	Z, r24
     2f4:	88 e9       	ldi	r24, 0x98	; 152
     2f6:	80 93 c9 00 	sts	0x00C9, r24
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	80 93 ca 00 	sts	0x00CA, r24
     300:	08 95       	ret

00000302 <transmitByte>:


//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
     302:	90 91 c8 00 	lds	r25, 0x00C8
     306:	95 ff       	sbrs	r25, 5
     308:	fc cf       	rjmp	.-8      	; 0x302 <transmitByte>
	UDR1 = data;							//UDR0 = USART 0 Data Register
     30a:	80 93 ce 00 	sts	0x00CE, r24
     30e:	08 95       	ret

00000310 <printString>:
}

//Transmits a string of characters.
void printString(const char string[])
{			
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
	uint8_t i = 0;								//Counter to increment for every character in the string.
     318:	10 e0       	ldi	r17, 0x00	; 0
	while ((string[i]) != '\0')				//Until null character (end of string).
     31a:	fe 01       	movw	r30, r28
     31c:	e1 0f       	add	r30, r17
     31e:	f1 1d       	adc	r31, r1
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	19 f0       	breq	.+6      	; 0x32c <printString+0x1c>
	{
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
     326:	ed df       	rcall	.-38     	; 0x302 <transmitByte>
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
     328:	1f 5f       	subi	r17, 0xFF	; 255
     32a:	f7 cf       	rjmp	.-18     	; 0x31a <printString+0xa>
	}
}
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	08 95       	ret

00000334 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     334:	29 2f       	mov	r18, r25
     336:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     338:	23 30       	cpi	r18, 0x03	; 3
     33a:	31 05       	cpc	r19, r1
     33c:	b9 f0       	breq	.+46     	; 0x36c <CALLBACK_USB_GetDescriptor+0x38>
     33e:	5c f4       	brge	.+22     	; 0x356 <CALLBACK_USB_GetDescriptor+0x22>
     340:	21 30       	cpi	r18, 0x01	; 1
     342:	31 05       	cpc	r19, r1
     344:	69 f1       	breq	.+90     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x6c>
     346:	22 30       	cpi	r18, 0x02	; 2
     348:	31 05       	cpc	r19, r1
     34a:	79 f5       	brne	.+94     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     34c:	82 e2       	ldi	r24, 0x22	; 34
     34e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     350:	20 ed       	ldi	r18, 0xD0	; 208
     352:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     354:	2e c0       	rjmp	.+92     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     356:	21 32       	cpi	r18, 0x21	; 33
     358:	31 05       	cpc	r19, r1
     35a:	e9 f0       	breq	.+58     	; 0x396 <CALLBACK_USB_GetDescriptor+0x62>
     35c:	22 32       	cpi	r18, 0x22	; 34
     35e:	31 05       	cpc	r19, r1
     360:	21 f5       	brne	.+72     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
     362:	8c e2       	ldi	r24, 0x2C	; 44
     364:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
     366:	24 e0       	ldi	r18, 0x04	; 4
     368:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MediaControlReport);
			break;
     36a:	23 c0       	rjmp	.+70     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x7e>
     36c:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	91 05       	cpc	r25, r1
     372:	41 f0       	breq	.+16     	; 0x384 <CALLBACK_USB_GetDescriptor+0x50>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	91 05       	cpc	r25, r1
     378:	41 f0       	breq	.+16     	; 0x38a <CALLBACK_USB_GetDescriptor+0x56>
     37a:	89 2b       	or	r24, r25
     37c:	b1 f4       	brne	.+44     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     37e:	ec ec       	ldi	r30, 0xCC	; 204
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	05 c0       	rjmp	.+10     	; 0x38e <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     384:	e2 eb       	ldi	r30, 0xB2	; 178
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	02 c0       	rjmp	.+4      	; 0x38e <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     38a:	e4 e8       	ldi	r30, 0x84	; 132
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	84 91       	lpm	r24, Z
     390:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     392:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     394:	0e c0       	rjmp	.+28     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     396:	89 e0       	ldi	r24, 0x09	; 9
     398:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
     39a:	22 ee       	ldi	r18, 0xE2	; 226
     39c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     39e:	09 c0       	rjmp	.+18     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3a0:	82 e1       	ldi	r24, 0x12	; 18
     3a2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3a4:	22 ef       	ldi	r18, 0xF2	; 242
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
			break;
	}

	*DescriptorAddress = Address;
     3b2:	fa 01       	movw	r30, r20
     3b4:	31 83       	std	Z+1, r19	; 0x01
     3b6:	20 83       	st	Z, r18
	return Size;
}
     3b8:	08 95       	ret

000003ba <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	7c 01       	movw	r14, r24
     3cc:	8b 01       	movw	r16, r22
     3ce:	ea 01       	movw	r28, r20
     3d0:	c9 d1       	rcall	.+914    	; 0x764 <Endpoint_WaitUntilReady>
     3d2:	81 11       	cpse	r24, r1
     3d4:	31 c0       	rjmp	.+98     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>
     3d6:	20 97       	sbiw	r28, 0x00	; 0
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <Endpoint_Write_Stream_LE+0x2c>
     3da:	88 81       	ld	r24, Y
     3dc:	99 81       	ldd	r25, Y+1	; 0x01
     3de:	08 1b       	sub	r16, r24
     3e0:	19 0b       	sbc	r17, r25
     3e2:	e8 0e       	add	r14, r24
     3e4:	f9 1e       	adc	r15, r25
     3e6:	c1 2c       	mov	r12, r1
     3e8:	d1 2c       	mov	r13, r1
     3ea:	01 15       	cp	r16, r1
     3ec:	11 05       	cpc	r17, r1
     3ee:	19 f1       	breq	.+70     	; 0x436 <Endpoint_Write_Stream_LE+0x7c>
     3f0:	80 91 e8 00 	lds	r24, 0x00E8
     3f4:	85 fd       	sbrc	r24, 5
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <Endpoint_Write_Stream_LE+0x66>
     3f8:	80 91 e8 00 	lds	r24, 0x00E8
     3fc:	8e 77       	andi	r24, 0x7E	; 126
     3fe:	80 93 e8 00 	sts	0x00E8, r24
     402:	17 d4       	rcall	.+2094   	; 0xc32 <USB_USBTask>
     404:	20 97       	sbiw	r28, 0x00	; 0
     406:	41 f0       	breq	.+16     	; 0x418 <Endpoint_Write_Stream_LE+0x5e>
     408:	88 81       	ld	r24, Y
     40a:	99 81       	ldd	r25, Y+1	; 0x01
     40c:	8c 0d       	add	r24, r12
     40e:	9d 1d       	adc	r25, r13
     410:	99 83       	std	Y+1, r25	; 0x01
     412:	88 83       	st	Y, r24
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	10 c0       	rjmp	.+32     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>
     418:	a5 d1       	rcall	.+842    	; 0x764 <Endpoint_WaitUntilReady>
     41a:	88 23       	and	r24, r24
     41c:	31 f3       	breq	.-52     	; 0x3ea <Endpoint_Write_Stream_LE+0x30>
     41e:	0c c0       	rjmp	.+24     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>
     420:	f7 01       	movw	r30, r14
     422:	81 91       	ld	r24, Z+
     424:	7f 01       	movw	r14, r30
     426:	80 93 f1 00 	sts	0x00F1, r24
     42a:	01 50       	subi	r16, 0x01	; 1
     42c:	11 09       	sbc	r17, r1
     42e:	ff ef       	ldi	r31, 0xFF	; 255
     430:	cf 1a       	sub	r12, r31
     432:	df 0a       	sbc	r13, r31
     434:	da cf       	rjmp	.-76     	; 0x3ea <Endpoint_Write_Stream_LE+0x30>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <Endpoint_Write_Control_Stream_LE>:
     44a:	20 91 3f 01 	lds	r18, 0x013F
     44e:	30 91 40 01 	lds	r19, 0x0140
     452:	26 17       	cp	r18, r22
     454:	37 07       	cpc	r19, r23
     456:	48 f0       	brcs	.+18     	; 0x46a <Endpoint_Write_Control_Stream_LE+0x20>
     458:	61 15       	cp	r22, r1
     45a:	71 05       	cpc	r23, r1
     45c:	39 f4       	brne	.+14     	; 0x46c <Endpoint_Write_Control_Stream_LE+0x22>
     45e:	20 91 e8 00 	lds	r18, 0x00E8
     462:	2e 77       	andi	r18, 0x7E	; 126
     464:	20 93 e8 00 	sts	0x00E8, r18
     468:	01 c0       	rjmp	.+2      	; 0x46c <Endpoint_Write_Control_Stream_LE+0x22>
     46a:	b9 01       	movw	r22, r18
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	61 15       	cp	r22, r1
     470:	71 05       	cpc	r23, r1
     472:	c9 f1       	breq	.+114    	; 0x4e6 <Endpoint_Write_Control_Stream_LE+0x9c>
     474:	3e b3       	in	r19, 0x1e	; 30
     476:	33 23       	and	r19, r19
     478:	09 f4       	brne	.+2      	; 0x47c <Endpoint_Write_Control_Stream_LE+0x32>
     47a:	42 c0       	rjmp	.+132    	; 0x500 <Endpoint_Write_Control_Stream_LE+0xb6>
     47c:	35 30       	cpi	r19, 0x05	; 5
     47e:	09 f4       	brne	.+2      	; 0x482 <Endpoint_Write_Control_Stream_LE+0x38>
     480:	41 c0       	rjmp	.+130    	; 0x504 <Endpoint_Write_Control_Stream_LE+0xba>
     482:	30 91 e8 00 	lds	r19, 0x00E8
     486:	33 fd       	sbrc	r19, 3
     488:	3f c0       	rjmp	.+126    	; 0x508 <Endpoint_Write_Control_Stream_LE+0xbe>
     48a:	30 91 e8 00 	lds	r19, 0x00E8
     48e:	32 ff       	sbrs	r19, 2
     490:	06 c0       	rjmp	.+12     	; 0x49e <Endpoint_Write_Control_Stream_LE+0x54>
     492:	80 91 e8 00 	lds	r24, 0x00E8
     496:	82 ff       	sbrs	r24, 2
     498:	29 c0       	rjmp	.+82     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0xa2>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 95       	ret
     49e:	30 91 e8 00 	lds	r19, 0x00E8
     4a2:	30 ff       	sbrs	r19, 0
     4a4:	e4 cf       	rjmp	.-56     	; 0x46e <Endpoint_Write_Control_Stream_LE+0x24>
     4a6:	20 91 f2 00 	lds	r18, 0x00F2
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	28 1b       	sub	r18, r24
     4b0:	39 0b       	sbc	r19, r25
     4b2:	cf 01       	movw	r24, r30
     4b4:	82 0f       	add	r24, r18
     4b6:	93 1f       	adc	r25, r19
     4b8:	61 15       	cp	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x86>
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	91 05       	cpc	r25, r1
     4c2:	30 f4       	brcc	.+12     	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x86>
     4c4:	81 91       	ld	r24, Z+
     4c6:	80 93 f1 00 	sts	0x00F1, r24
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	71 09       	sbc	r23, r1
     4ce:	f1 cf       	rjmp	.-30     	; 0x4b2 <Endpoint_Write_Control_Stream_LE+0x68>
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	08 97       	sbiw	r24, 0x08	; 8
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x8e>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	80 91 e8 00 	lds	r24, 0x00E8
     4dc:	8e 77       	andi	r24, 0x7E	; 126
     4de:	80 93 e8 00 	sts	0x00E8, r24
     4e2:	cf 01       	movw	r24, r30
     4e4:	c4 cf       	rjmp	.-120    	; 0x46e <Endpoint_Write_Control_Stream_LE+0x24>
     4e6:	21 11       	cpse	r18, r1
     4e8:	c5 cf       	rjmp	.-118    	; 0x474 <Endpoint_Write_Control_Stream_LE+0x2a>
     4ea:	d3 cf       	rjmp	.-90     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x48>
     4ec:	8e b3       	in	r24, 0x1e	; 30
     4ee:	88 23       	and	r24, r24
     4f0:	39 f0       	breq	.+14     	; 0x500 <Endpoint_Write_Control_Stream_LE+0xb6>
     4f2:	85 30       	cpi	r24, 0x05	; 5
     4f4:	39 f0       	breq	.+14     	; 0x504 <Endpoint_Write_Control_Stream_LE+0xba>
     4f6:	80 91 e8 00 	lds	r24, 0x00E8
     4fa:	83 ff       	sbrs	r24, 3
     4fc:	ca cf       	rjmp	.-108    	; 0x492 <Endpoint_Write_Control_Stream_LE+0x48>
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <Endpoint_Write_Control_Stream_LE+0xbe>
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	08 95       	ret
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	08 95       	ret
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	08 95       	ret

0000050c <Endpoint_Read_Control_Stream_LE>:
     50c:	61 15       	cp	r22, r1
     50e:	71 05       	cpc	r23, r1
     510:	29 f4       	brne	.+10     	; 0x51c <Endpoint_Read_Control_Stream_LE+0x10>
     512:	20 91 e8 00 	lds	r18, 0x00E8
     516:	2b 77       	andi	r18, 0x7B	; 123
     518:	20 93 e8 00 	sts	0x00E8, r18
     51c:	61 15       	cp	r22, r1
     51e:	71 05       	cpc	r23, r1
     520:	11 f1       	breq	.+68     	; 0x566 <Endpoint_Read_Control_Stream_LE+0x5a>
     522:	2e b3       	in	r18, 0x1e	; 30
     524:	22 23       	and	r18, r18
     526:	41 f1       	breq	.+80     	; 0x578 <Endpoint_Read_Control_Stream_LE+0x6c>
     528:	25 30       	cpi	r18, 0x05	; 5
     52a:	41 f1       	breq	.+80     	; 0x57c <Endpoint_Read_Control_Stream_LE+0x70>
     52c:	20 91 e8 00 	lds	r18, 0x00E8
     530:	23 fd       	sbrc	r18, 3
     532:	1e c0       	rjmp	.+60     	; 0x570 <Endpoint_Read_Control_Stream_LE+0x64>
     534:	20 91 e8 00 	lds	r18, 0x00E8
     538:	22 ff       	sbrs	r18, 2
     53a:	f3 cf       	rjmp	.-26     	; 0x522 <Endpoint_Read_Control_Stream_LE+0x16>
     53c:	fc 01       	movw	r30, r24
     53e:	cf 01       	movw	r24, r30
     540:	20 91 f2 00 	lds	r18, 0x00F2
     544:	22 23       	and	r18, r18
     546:	29 f3       	breq	.-54     	; 0x512 <Endpoint_Read_Control_Stream_LE+0x6>
     548:	80 91 f1 00 	lds	r24, 0x00F1
     54c:	81 93       	st	Z+, r24
     54e:	cf 01       	movw	r24, r30
     550:	61 50       	subi	r22, 0x01	; 1
     552:	71 09       	sbc	r23, r1
     554:	61 15       	cp	r22, r1
     556:	71 05       	cpc	r23, r1
     558:	91 f7       	brne	.-28     	; 0x53e <Endpoint_Read_Control_Stream_LE+0x32>
     55a:	db cf       	rjmp	.-74     	; 0x512 <Endpoint_Read_Control_Stream_LE+0x6>
     55c:	8e b3       	in	r24, 0x1e	; 30
     55e:	88 23       	and	r24, r24
     560:	59 f0       	breq	.+22     	; 0x578 <Endpoint_Read_Control_Stream_LE+0x6c>
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	59 f0       	breq	.+22     	; 0x57c <Endpoint_Read_Control_Stream_LE+0x70>
     566:	80 91 e8 00 	lds	r24, 0x00E8
     56a:	80 ff       	sbrs	r24, 0
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <Endpoint_Read_Control_Stream_LE+0x50>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <Endpoint_Read_Control_Stream_LE+0x68>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	08 95       	ret
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	08 95       	ret
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	08 95       	ret
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	08 95       	ret

00000580 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     580:	20 91 3f 01 	lds	r18, 0x013F
     584:	30 91 40 01 	lds	r19, 0x0140
     588:	26 17       	cp	r18, r22
     58a:	37 07       	cpc	r19, r23
     58c:	48 f0       	brcs	.+18     	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     58e:	61 15       	cp	r22, r1
     590:	71 05       	cpc	r23, r1
     592:	39 f4       	brne	.+14     	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     594:	20 91 e8 00 	lds	r18, 0x00E8
     598:	2e 77       	andi	r18, 0x7E	; 126
     59a:	20 93 e8 00 	sts	0x00E8, r18
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x22>
     5a0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5a2:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5a4:	61 15       	cp	r22, r1
     5a6:	71 05       	cpc	r23, r1
     5a8:	d1 f1       	breq	.+116    	; 0x61e <Endpoint_Write_Control_PStream_LE+0x9e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5aa:	3e b3       	in	r19, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ac:	33 23       	and	r19, r19
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <Endpoint_Write_Control_PStream_LE+0x32>
     5b0:	43 c0       	rjmp	.+134    	; 0x638 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5b2:	35 30       	cpi	r19, 0x05	; 5
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x38>
     5b6:	42 c0       	rjmp	.+132    	; 0x63c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5b8:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5bc:	33 fd       	sbrc	r19, 3
     5be:	40 c0       	rjmp	.+128    	; 0x640 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c0:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5c4:	32 ff       	sbrs	r19, 2
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x54>
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5cc:	82 ff       	sbrs	r24, 2
     5ce:	2a c0       	rjmp	.+84     	; 0x624 <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5d4:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     5d8:	30 ff       	sbrs	r19, 0
     5da:	e4 cf       	rjmp	.-56     	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5dc:	20 91 f2 00 	lds	r18, 0x00F2
     5e0:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5e2:	fc 01       	movw	r30, r24
     5e4:	28 1b       	sub	r18, r24
     5e6:	39 0b       	sbc	r19, r25
     5e8:	c9 01       	movw	r24, r18
     5ea:	8e 0f       	add	r24, r30
     5ec:	9f 1f       	adc	r25, r31
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	51 f0       	breq	.+20     	; 0x608 <Endpoint_Write_Control_PStream_LE+0x88>
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	91 05       	cpc	r25, r1
     5f8:	38 f4       	brcc	.+14     	; 0x608 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5fa:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5fc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     600:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     602:	61 50       	subi	r22, 0x01	; 1
     604:	71 09       	sbc	r23, r1
     606:	f0 cf       	rjmp	.-32     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x68>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	08 97       	sbiw	r24, 0x08	; 8
     60c:	09 f0       	breq	.+2      	; 0x610 <Endpoint_Write_Control_PStream_LE+0x90>
     60e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     610:	80 91 e8 00 	lds	r24, 0x00E8
     614:	8e 77       	andi	r24, 0x7E	; 126
     616:	80 93 e8 00 	sts	0x00E8, r24
     61a:	cf 01       	movw	r24, r30
     61c:	c3 cf       	rjmp	.-122    	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     61e:	21 11       	cpse	r18, r1
     620:	c4 cf       	rjmp	.-120    	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x2a>
     622:	d2 cf       	rjmp	.-92     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     624:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     626:	88 23       	and	r24, r24
     628:	39 f0       	breq	.+14     	; 0x638 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     62a:	85 30       	cpi	r24, 0x05	; 5
     62c:	39 f0       	breq	.+14     	; 0x63c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     62e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     632:	83 ff       	sbrs	r24, 3
     634:	c9 cf       	rjmp	.-110    	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x48>
     636:	04 c0       	rjmp	.+8      	; 0x640 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     640:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     642:	08 95       	ret

00000644 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     644:	98 2f       	mov	r25, r24
     646:	95 30       	cpi	r25, 0x05	; 5
     648:	58 f5       	brcc	.+86     	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     64a:	90 93 e9 00 	sts	0x00E9, r25
     64e:	98 17       	cp	r25, r24
     650:	39 f0       	breq	.+14     	; 0x660 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     652:	70 91 ec 00 	lds	r23, 0x00EC
     656:	20 91 ed 00 	lds	r18, 0x00ED
     65a:	50 91 f0 00 	lds	r21, 0x00F0
     65e:	03 c0       	rjmp	.+6      	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x22>
     660:	24 2f       	mov	r18, r20
     662:	76 2f       	mov	r23, r22
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	21 ff       	sbrs	r18, 1
     668:	19 c0       	rjmp	.+50     	; 0x69c <Endpoint_ConfigureEndpoint_Prv+0x58>
     66a:	30 91 eb 00 	lds	r19, 0x00EB
     66e:	3e 7f       	andi	r19, 0xFE	; 254
     670:	30 93 eb 00 	sts	0x00EB, r19
     674:	30 91 ed 00 	lds	r19, 0x00ED
     678:	3d 7f       	andi	r19, 0xFD	; 253
     67a:	30 93 ed 00 	sts	0x00ED, r19
     67e:	30 91 eb 00 	lds	r19, 0x00EB
     682:	31 60       	ori	r19, 0x01	; 1
     684:	30 93 eb 00 	sts	0x00EB, r19
     688:	70 93 ec 00 	sts	0x00EC, r23
     68c:	20 93 ed 00 	sts	0x00ED, r18
     690:	50 93 f0 00 	sts	0x00F0, r21
     694:	20 91 ee 00 	lds	r18, 0x00EE
     698:	27 ff       	sbrs	r18, 7
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <Endpoint_ConfigureEndpoint_Prv+0x66>
     69c:	9f 5f       	subi	r25, 0xFF	; 255
     69e:	d3 cf       	rjmp	.-90     	; 0x646 <Endpoint_ConfigureEndpoint_Prv+0x2>
     6a0:	8f 70       	andi	r24, 0x0F	; 15
     6a2:	80 93 e9 00 	sts	0x00E9, r24
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	08 95       	ret

000006ae <Endpoint_ConfigureEndpointTable>:
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	06 2f       	mov	r16, r22
     6b8:	ec 01       	movw	r28, r24
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	10 17       	cp	r17, r16
     6be:	69 f1       	breq	.+90     	; 0x71a <Endpoint_ConfigureEndpointTable+0x6c>
     6c0:	98 81       	ld	r25, Y
     6c2:	99 23       	and	r25, r25
     6c4:	39 f1       	breq	.+78     	; 0x714 <Endpoint_ConfigureEndpointTable+0x66>
     6c6:	2c 81       	ldd	r18, Y+4	; 0x04
     6c8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ca:	fa 81       	ldd	r31, Y+2	; 0x02
     6cc:	6b 81       	ldd	r22, Y+3	; 0x03
     6ce:	89 2f       	mov	r24, r25
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	85 30       	cpi	r24, 0x05	; 5
     6d4:	10 f0       	brcs	.+4      	; 0x6da <Endpoint_ConfigureEndpointTable+0x2c>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	21 c0       	rjmp	.+66     	; 0x71c <Endpoint_ConfigureEndpointTable+0x6e>
     6da:	22 30       	cpi	r18, 0x02	; 2
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <Endpoint_ConfigureEndpointTable+0x34>
     6de:	56 e0       	ldi	r21, 0x06	; 6
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <Endpoint_ConfigureEndpointTable+0x36>
     6e2:	52 e0       	ldi	r21, 0x02	; 2
     6e4:	28 e0       	ldi	r18, 0x08	; 8
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	2e 17       	cp	r18, r30
     6ec:	3f 07       	cpc	r19, r31
     6ee:	20 f4       	brcc	.+8      	; 0x6f8 <Endpoint_ConfigureEndpointTable+0x4a>
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	f9 cf       	rjmp	.-14     	; 0x6ea <Endpoint_ConfigureEndpointTable+0x3c>
     6f8:	42 95       	swap	r20
     6fa:	40 7f       	andi	r20, 0xF0	; 240
     6fc:	45 2b       	or	r20, r21
     6fe:	99 1f       	adc	r25, r25
     700:	99 27       	eor	r25, r25
     702:	99 1f       	adc	r25, r25
     704:	62 95       	swap	r22
     706:	66 0f       	add	r22, r22
     708:	66 0f       	add	r22, r22
     70a:	60 7c       	andi	r22, 0xC0	; 192
     70c:	69 2b       	or	r22, r25
     70e:	9a df       	rcall	.-204    	; 0x644 <Endpoint_ConfigureEndpoint_Prv>
     710:	88 23       	and	r24, r24
     712:	09 f3       	breq	.-62     	; 0x6d6 <Endpoint_ConfigureEndpointTable+0x28>
     714:	1f 5f       	subi	r17, 0xFF	; 255
     716:	25 96       	adiw	r28, 0x05	; 5
     718:	d1 cf       	rjmp	.-94     	; 0x6bc <Endpoint_ConfigureEndpointTable+0xe>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     726:	80 91 39 01 	lds	r24, 0x0139
     72a:	87 fd       	sbrc	r24, 7
     72c:	05 c0       	rjmp	.+10     	; 0x738 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     72e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     732:	80 ff       	sbrs	r24, 0
     734:	0d c0       	rjmp	.+26     	; 0x750 <Endpoint_ClearStatusStage+0x2a>
     736:	10 c0       	rjmp	.+32     	; 0x758 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     738:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     73c:	82 fd       	sbrc	r24, 2
     73e:	04 c0       	rjmp	.+8      	; 0x748 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     740:	8e b3       	in	r24, 0x1e	; 30
     742:	81 11       	cpse	r24, r1
     744:	f9 cf       	rjmp	.-14     	; 0x738 <Endpoint_ClearStatusStage+0x12>
     746:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     748:	80 91 e8 00 	lds	r24, 0x00E8
     74c:	8b 77       	andi	r24, 0x7B	; 123
     74e:	07 c0       	rjmp	.+14     	; 0x75e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     750:	8e b3       	in	r24, 0x1e	; 30
     752:	81 11       	cpse	r24, r1
     754:	ec cf       	rjmp	.-40     	; 0x72e <Endpoint_ClearStatusStage+0x8>
     756:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     758:	80 91 e8 00 	lds	r24, 0x00E8
     75c:	8e 77       	andi	r24, 0x7E	; 126
     75e:	80 93 e8 00 	sts	0x00E8, r24
     762:	08 95       	ret

00000764 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     764:	80 91 e4 00 	lds	r24, 0x00E4
     768:	90 91 e5 00 	lds	r25, 0x00E5
     76c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     76e:	20 91 ec 00 	lds	r18, 0x00EC
     772:	20 ff       	sbrs	r18, 0
     774:	20 c0       	rjmp	.+64     	; 0x7b6 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     776:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     77a:	20 fd       	sbrc	r18, 0
     77c:	20 c0       	rjmp	.+64     	; 0x7be <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     77e:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     780:	22 23       	and	r18, r18
     782:	89 f0       	breq	.+34     	; 0x7a6 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     784:	25 30       	cpi	r18, 0x05	; 5
     786:	89 f0       	breq	.+34     	; 0x7aa <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     788:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     78c:	25 fd       	sbrc	r18, 5
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <Endpoint_WaitUntilReady+0x4a>
     790:	20 91 e4 00 	lds	r18, 0x00E4
     794:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	41 f3       	breq	.-48     	; 0x76e <Endpoint_WaitUntilReady+0xa>
     79e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <Endpoint_WaitUntilReady+0x4e>
     7a2:	c9 01       	movw	r24, r18
     7a4:	e4 cf       	rjmp	.-56     	; 0x76e <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7b2:	84 e0       	ldi	r24, 0x04	; 4
     7b4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7b6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7ba:	22 ff       	sbrs	r18, 2
     7bc:	e0 cf       	rjmp	.-64     	; 0x77e <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret

000007c2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7c2:	40 d0       	rcall	.+128    	; 0x844 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7c4:	42 d0       	rcall	.+132    	; 0x84a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7c6:	80 91 d8 00 	lds	r24, 0x00D8
     7ca:	8f 77       	andi	r24, 0x7F	; 127
     7cc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     7d0:	80 91 d8 00 	lds	r24, 0x00D8
     7d4:	80 68       	ori	r24, 0x80	; 128
     7d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7da:	80 91 d8 00 	lds	r24, 0x00D8
     7de:	8f 7d       	andi	r24, 0xDF	; 223
     7e0:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7e8:	86 e0       	ldi	r24, 0x06	; 6
     7ea:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7ec:	09 b4       	in	r0, 0x29	; 41
     7ee:	00 fe       	sbrs	r0, 0
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7f2:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     7f4:	10 92 35 01 	sts	0x0135, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7f8:	10 92 37 01 	sts	0x0137, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7fc:	10 92 36 01 	sts	0x0136, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     800:	42 e0       	ldi	r20, 0x02	; 2
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	1e df       	rcall	.-452    	; 0x644 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     808:	80 91 e1 00 	lds	r24, 0x00E1
     80c:	8e 7f       	andi	r24, 0xFE	; 254
     80e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     812:	80 91 e2 00 	lds	r24, 0x00E2
     816:	81 60       	ori	r24, 0x01	; 1
     818:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     81c:	80 91 e2 00 	lds	r24, 0x00E2
     820:	88 60       	ori	r24, 0x08	; 8
     822:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     826:	80 91 e0 00 	lds	r24, 0x00E0
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	80 93 e0 00 	sts	0x00E0, r24
     830:	08 95       	ret

00000832 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     832:	e3 e6       	ldi	r30, 0x63	; 99
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8e 7f       	andi	r24, 0xFE	; 254
     83a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 38 01 	sts	0x0138, r24

	USB_ResetInterface();
     842:	bf cf       	rjmp	.-130    	; 0x7c2 <USB_ResetInterface>

00000844 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     844:	10 92 e2 00 	sts	0x00E2, r1
     848:	08 95       	ret

0000084a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     84a:	10 92 e1 00 	sts	0x00E1, r1
     84e:	08 95       	ret

00000850 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     872:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     876:	82 ff       	sbrs	r24, 2
     878:	0a c0       	rjmp	.+20     	; 0x88e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     87a:	80 91 e2 00 	lds	r24, 0x00E2
     87e:	82 ff       	sbrs	r24, 2
     880:	06 c0       	rjmp	.+12     	; 0x88e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     882:	80 91 e1 00 	lds	r24, 0x00E1
     886:	8b 7f       	andi	r24, 0xFB	; 251
     888:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     88c:	ff dc       	rcall	.-1538   	; 0x28c <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     88e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     892:	80 ff       	sbrs	r24, 0
     894:	16 c0       	rjmp	.+44     	; 0x8c2 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     896:	80 91 e2 00 	lds	r24, 0x00E2
     89a:	80 ff       	sbrs	r24, 0
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     89e:	80 91 e2 00 	lds	r24, 0x00E2
     8a2:	8e 7f       	andi	r24, 0xFE	; 254
     8a4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8a8:	80 91 e2 00 	lds	r24, 0x00E2
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8b2:	80 91 d8 00 	lds	r24, 0x00D8
     8b6:	80 62       	ori	r24, 0x20	; 32
     8b8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8bc:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8be:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     8c0:	b7 d1       	rcall	.+878    	; 0xc30 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8c2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8c6:	84 ff       	sbrs	r24, 4
     8c8:	2e c0       	rjmp	.+92     	; 0x926 <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
     8ce:	84 ff       	sbrs	r24, 4
     8d0:	2a c0       	rjmp	.+84     	; 0x926 <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8d6:	86 e0       	ldi	r24, 0x06	; 6
     8d8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8da:	09 b4       	in	r0, 0x29	; 41
     8dc:	00 fe       	sbrs	r0, 0
     8de:	fd cf       	rjmp	.-6      	; 0x8da <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8e0:	80 91 d8 00 	lds	r24, 0x00D8
     8e4:	8f 7d       	andi	r24, 0xDF	; 223
     8e6:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     8ea:	80 91 e1 00 	lds	r24, 0x00E1
     8ee:	8f 7e       	andi	r24, 0xEF	; 239
     8f0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8f4:	80 91 e2 00 	lds	r24, 0x00E2
     8f8:	8f 7e       	andi	r24, 0xEF	; 239
     8fa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8fe:	80 91 e2 00 	lds	r24, 0x00E2
     902:	81 60       	ori	r24, 0x01	; 1
     904:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     908:	80 91 35 01 	lds	r24, 0x0135
     90c:	88 23       	and	r24, r24
     90e:	11 f0       	breq	.+4      	; 0x914 <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	07 c0       	rjmp	.+14     	; 0x922 <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     914:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     918:	87 ff       	sbrs	r24, 7
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__vector_11+0xd0>
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__vector_11+0xd2>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     924:	85 d1       	rcall	.+778    	; 0xc30 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     926:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     92a:	83 ff       	sbrs	r24, 3
     92c:	21 c0       	rjmp	.+66     	; 0x970 <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     92e:	80 91 e2 00 	lds	r24, 0x00E2
     932:	83 ff       	sbrs	r24, 3
     934:	1d c0       	rjmp	.+58     	; 0x970 <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     936:	80 91 e1 00 	lds	r24, 0x00E1
     93a:	87 7f       	andi	r24, 0xF7	; 247
     93c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     944:	10 92 35 01 	sts	0x0135, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     948:	80 91 e1 00 	lds	r24, 0x00E1
     94c:	8e 7f       	andi	r24, 0xFE	; 254
     94e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     952:	80 91 e2 00 	lds	r24, 0x00E2
     956:	8e 7f       	andi	r24, 0xFE	; 254
     958:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     95c:	80 91 e2 00 	lds	r24, 0x00E2
     960:	80 61       	ori	r24, 0x10	; 16
     962:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     966:	42 e0       	ldi	r20, 0x02	; 2
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	6b de       	rcall	.-810    	; 0x644 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     96e:	60 d1       	rcall	.+704    	; 0xc30 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	aa 97       	sbiw	r28, 0x2a	; 42
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	e9 e3       	ldi	r30, 0x39	; 57
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9ac:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9b0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9b2:	21 e0       	ldi	r18, 0x01	; 1
     9b4:	e1 34       	cpi	r30, 0x41	; 65
     9b6:	f2 07       	cpc	r31, r18
     9b8:	c9 f7       	brne	.-14     	; 0x9ac <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9ba:	65 dc       	rcall	.-1846   	; 0x286 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9bc:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9c0:	83 ff       	sbrs	r24, 3
     9c2:	1e c1       	rjmp	.+572    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9c4:	90 91 39 01 	lds	r25, 0x0139

		switch (USB_ControlRequest.bRequest)
     9c8:	80 91 3a 01 	lds	r24, 0x013A
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x40>
     9d0:	77 c0       	rjmp	.+238    	; 0xac0 <USB_Device_ProcessControlRequest+0x12e>
     9d2:	30 f4       	brcc	.+12     	; 0x9e0 <USB_Device_ProcessControlRequest+0x4e>
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	81 f1       	breq	.+96     	; 0xa38 <USB_Device_ProcessControlRequest+0xa6>
     9d8:	68 f0       	brcs	.+26     	; 0x9f4 <USB_Device_ProcessControlRequest+0x62>
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	69 f1       	breq	.+90     	; 0xa38 <USB_Device_ProcessControlRequest+0xa6>
     9de:	10 c1       	rjmp	.+544    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
     9e0:	88 30       	cpi	r24, 0x08	; 8
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0x54>
     9e4:	e0 c0       	rjmp	.+448    	; 0xba6 <USB_Device_ProcessControlRequest+0x214>
     9e6:	89 30       	cpi	r24, 0x09	; 9
     9e8:	09 f4       	brne	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x5a>
     9ea:	ef c0       	rjmp	.+478    	; 0xbca <USB_Device_ProcessControlRequest+0x238>
     9ec:	86 30       	cpi	r24, 0x06	; 6
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <USB_Device_ProcessControlRequest+0x60>
     9f0:	07 c1       	rjmp	.+526    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
     9f2:	87 c0       	rjmp	.+270    	; 0xb02 <USB_Device_ProcessControlRequest+0x170>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9f4:	90 38       	cpi	r25, 0x80	; 128
     9f6:	81 f0       	breq	.+32     	; 0xa18 <USB_Device_ProcessControlRequest+0x86>
     9f8:	92 38       	cpi	r25, 0x82	; 130
     9fa:	09 f0       	breq	.+2      	; 0x9fe <USB_Device_ProcessControlRequest+0x6c>
     9fc:	01 c1       	rjmp	.+514    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9fe:	80 91 3d 01 	lds	r24, 0x013D
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a08:	80 91 eb 00 	lds	r24, 0x00EB
     a0c:	85 fb       	bst	r24, 5
     a0e:	88 27       	eor	r24, r24
     a10:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a12:	10 92 e9 00 	sts	0x00E9, r1
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a18:	80 91 36 01 	lds	r24, 0x0136
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a1c:	90 91 37 01 	lds	r25, 0x0137
     a20:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a22:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a24:	90 91 e8 00 	lds	r25, 0x00E8
     a28:	97 7f       	andi	r25, 0xF7	; 247
     a2a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a2e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     a32:	10 92 f1 00 	sts	0x00F1, r1
     a36:	c2 c0       	rjmp	.+388    	; 0xbbc <USB_Device_ProcessControlRequest+0x22a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a38:	29 2f       	mov	r18, r25
     a3a:	2d 7f       	andi	r18, 0xFD	; 253
     a3c:	09 f0       	breq	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0xae>
     a3e:	e0 c0       	rjmp	.+448    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a40:	99 23       	and	r25, r25
     a42:	19 f0       	breq	.+6      	; 0xa4a <USB_Device_ProcessControlRequest+0xb8>
     a44:	92 30       	cpi	r25, 0x02	; 2
     a46:	61 f0       	breq	.+24     	; 0xa60 <USB_Device_ProcessControlRequest+0xce>
     a48:	db c0       	rjmp	.+438    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a4a:	90 91 3b 01 	lds	r25, 0x013B
     a4e:	91 30       	cpi	r25, 0x01	; 1
     a50:	09 f0       	breq	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0xc2>
     a52:	d6 c0       	rjmp	.+428    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	09 f0       	breq	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0xc8>
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 37 01 	sts	0x0137, r25
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a60:	90 91 3b 01 	lds	r25, 0x013B
     a64:	91 11       	cpse	r25, r1
     a66:	26 c0       	rjmp	.+76     	; 0xab4 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a68:	20 91 3d 01 	lds	r18, 0x013D
     a6c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a6e:	09 f4       	brne	.+2      	; 0xa72 <USB_Device_ProcessControlRequest+0xe0>
     a70:	c7 c0       	rjmp	.+398    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a72:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a76:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a7a:	90 ff       	sbrs	r25, 0
     a7c:	1b c0       	rjmp	.+54     	; 0xab4 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a7e:	83 30       	cpi	r24, 0x03	; 3
     a80:	21 f4       	brne	.+8      	; 0xa8a <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a82:	80 91 eb 00 	lds	r24, 0x00EB
     a86:	80 62       	ori	r24, 0x20	; 32
     a88:	13 c0       	rjmp	.+38     	; 0xab0 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a8a:	80 91 eb 00 	lds	r24, 0x00EB
     a8e:	80 61       	ori	r24, 0x10	; 16
     a90:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 2e       	mov	r0, r18
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x10c>
     a9c:	88 0f       	add	r24, r24
     a9e:	0a 94       	dec	r0
     aa0:	ea f7       	brpl	.-6      	; 0xa9c <USB_Device_ProcessControlRequest+0x10a>
     aa2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     aa6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     aaa:	80 91 eb 00 	lds	r24, 0x00EB
     aae:	88 60       	ori	r24, 0x08	; 8
     ab0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ab4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ab8:	80 91 e8 00 	lds	r24, 0x00E8
     abc:	87 7f       	andi	r24, 0xF7	; 247
     abe:	81 c0       	rjmp	.+258    	; 0xbc2 <USB_Device_ProcessControlRequest+0x230>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ac0:	91 11       	cpse	r25, r1
     ac2:	9e c0       	rjmp	.+316    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ac4:	10 91 3b 01 	lds	r17, 0x013B
     ac8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     aca:	80 91 e3 00 	lds	r24, 0x00E3
     ace:	80 78       	andi	r24, 0x80	; 128
     ad0:	81 2b       	or	r24, r17
     ad2:	80 93 e3 00 	sts	0x00E3, r24
     ad6:	80 91 e8 00 	lds	r24, 0x00E8
     ada:	87 7f       	andi	r24, 0xF7	; 247
     adc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ae0:	22 de       	rcall	.-956    	; 0x726 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ae2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     ae6:	80 ff       	sbrs	r24, 0
     ae8:	fc cf       	rjmp	.-8      	; 0xae2 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     aea:	80 91 e3 00 	lds	r24, 0x00E3
     aee:	80 68       	ori	r24, 0x80	; 128
     af0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     af4:	11 23       	and	r17, r17
     af6:	11 f0       	breq	.+4      	; 0xafc <USB_Device_ProcessControlRequest+0x16a>
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	01 c0       	rjmp	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0x16c>
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	8e bb       	out	0x1e, r24	; 30
     b00:	7f c0       	rjmp	.+254    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b02:	90 58       	subi	r25, 0x80	; 128
     b04:	92 30       	cpi	r25, 0x02	; 2
     b06:	08 f0       	brcs	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0x178>
     b08:	7b c0       	rjmp	.+246    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b0a:	80 91 3b 01 	lds	r24, 0x013B
     b0e:	90 91 3c 01 	lds	r25, 0x013C
     b12:	8c 3d       	cpi	r24, 0xDC	; 220
     b14:	23 e0       	ldi	r18, 0x03	; 3
     b16:	92 07       	cpc	r25, r18
     b18:	71 f5       	brne	.+92     	; 0xb76 <USB_Device_ProcessControlRequest+0x1e4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b1e:	8a e2       	ldi	r24, 0x2A	; 42
     b20:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b22:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b24:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b26:	de 01       	movw	r26, r28
     b28:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b2a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b2c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b2e:	51 e2       	ldi	r21, 0x21	; 33
     b30:	e3 2f       	mov	r30, r19
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	50 93 57 00 	sts	0x0057, r21
     b38:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     b3a:	20 ff       	sbrs	r18, 0
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <USB_Device_ProcessControlRequest+0x1b2>
					{
						SerialByte >>= 4;
     b3e:	e2 95       	swap	r30
     b40:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b42:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b44:	ef 70       	andi	r30, 0x0F	; 15
     b46:	8e 2f       	mov	r24, r30
     b48:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b4a:	ea 30       	cpi	r30, 0x0A	; 10
     b4c:	10 f0       	brcs	.+4      	; 0xb52 <USB_Device_ProcessControlRequest+0x1c0>
     b4e:	c7 96       	adiw	r24, 0x37	; 55
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x1c2>
     b52:	c0 96       	adiw	r24, 0x30	; 48
     b54:	8d 93       	st	X+, r24
     b56:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	24 31       	cpi	r18, 0x14	; 20
     b5c:	49 f7       	brne	.-46     	; 0xb30 <USB_Device_ProcessControlRequest+0x19e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b5e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b60:	80 91 e8 00 	lds	r24, 0x00E8
     b64:	87 7f       	andi	r24, 0xF7	; 247
     b66:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b6a:	6a e2       	ldi	r22, 0x2A	; 42
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	6b dc       	rcall	.-1834   	; 0x44a <Endpoint_Write_Control_Stream_LE>
     b74:	12 c0       	rjmp	.+36     	; 0xb9a <USB_Device_ProcessControlRequest+0x208>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b76:	ae 01       	movw	r20, r28
     b78:	4f 5f       	subi	r20, 0xFF	; 255
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	60 91 3d 01 	lds	r22, 0x013D
     b80:	d9 db       	rcall	.-2126   	; 0x334 <CALLBACK_USB_GetDescriptor>
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	09 f4       	brne	.+2      	; 0xb88 <USB_Device_ProcessControlRequest+0x1f6>
     b86:	3c c0       	rjmp	.+120    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
     b88:	20 91 e8 00 	lds	r18, 0x00E8
     b8c:	27 7f       	andi	r18, 0xF7	; 247
     b8e:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b92:	bc 01       	movw	r22, r24
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	f3 dc       	rcall	.-1562   	; 0x580 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b9a:	80 91 e8 00 	lds	r24, 0x00E8
     b9e:	8b 77       	andi	r24, 0x7B	; 123
     ba0:	80 93 e8 00 	sts	0x00E8, r24
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ba6:	90 38       	cpi	r25, 0x80	; 128
     ba8:	59 f5       	brne	.+86     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     baa:	80 91 e8 00 	lds	r24, 0x00E8
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bb4:	80 91 35 01 	lds	r24, 0x0135
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bb8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bbc:	80 91 e8 00 	lds	r24, 0x00E8
     bc0:	8e 77       	andi	r24, 0x7E	; 126
     bc2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bc6:	af dd       	rcall	.-1186   	; 0x726 <Endpoint_ClearStatusStage>
     bc8:	1b c0       	rjmp	.+54     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bca:	91 11       	cpse	r25, r1
     bcc:	19 c0       	rjmp	.+50     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bce:	90 91 3b 01 	lds	r25, 0x013B
     bd2:	92 30       	cpi	r25, 0x02	; 2
     bd4:	a8 f4       	brcc	.+42     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bd6:	80 91 e8 00 	lds	r24, 0x00E8
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     be0:	90 93 35 01 	sts	0x0135, r25

	Endpoint_ClearStatusStage();
     be4:	a0 dd       	rcall	.-1216   	; 0x726 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     be6:	80 91 35 01 	lds	r24, 0x0135
     bea:	81 11       	cpse	r24, r1
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <USB_Device_ProcessControlRequest+0x264>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bee:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bf2:	87 ff       	sbrs	r24, 7
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <USB_Device_ProcessControlRequest+0x268>
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0x26a>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     bfe:	3a db       	rcall	.-2444   	; 0x274 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c04:	83 ff       	sbrs	r24, 3
     c06:	0a c0       	rjmp	.+20     	; 0xc1c <USB_Device_ProcessControlRequest+0x28a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c08:	80 91 e8 00 	lds	r24, 0x00E8
     c0c:	87 7f       	andi	r24, 0xF7	; 247
     c0e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c12:	80 91 eb 00 	lds	r24, 0x00EB
     c16:	80 62       	ori	r24, 0x20	; 32
     c18:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c1c:	aa 96       	adiw	r28, 0x2a	; 42
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	08 95       	ret

00000c30 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c30:	08 95       	ret

00000c32 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c32:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c34:	8e b3       	in	r24, 0x1e	; 30
     c36:	88 23       	and	r24, r24
     c38:	a9 f0       	breq	.+42     	; 0xc64 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c3a:	80 91 e9 00 	lds	r24, 0x00E9
     c3e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c40:	90 91 ec 00 	lds	r25, 0x00EC
     c44:	90 ff       	sbrs	r25, 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <USB_USBTask+0x1a>
     c48:	90 e8       	ldi	r25, 0x80	; 128
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <USB_USBTask+0x1c>
     c4c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c4e:	c9 2f       	mov	r28, r25
     c50:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c52:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c56:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c5a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c5c:	9a de       	rcall	.-716    	; 0x992 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c5e:	cf 70       	andi	r28, 0x0F	; 15
     c60:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c68:	6f 92       	push	r6
     c6a:	7f 92       	push	r7
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 d0       	rcall	.+0      	; 0xc86 <HID_Device_ProcessControlRequest+0x1e>
     c86:	1f 92       	push	r1
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c8e:	ad b6       	in	r10, 0x3d	; 61
     c90:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c92:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c96:	83 ff       	sbrs	r24, 3
     c98:	02 c1       	rjmp	.+516    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c9a:	f7 01       	movw	r30, r14
     c9c:	80 81       	ld	r24, Z
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	20 91 3d 01 	lds	r18, 0x013D
     ca4:	30 91 3e 01 	lds	r19, 0x013E
     ca8:	28 17       	cp	r18, r24
     caa:	39 07       	cpc	r19, r25
     cac:	09 f0       	breq	.+2      	; 0xcb0 <HID_Device_ProcessControlRequest+0x48>
     cae:	f7 c0       	rjmp	.+494    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     cb0:	80 91 3a 01 	lds	r24, 0x013A
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	09 f4       	brne	.+2      	; 0xcba <HID_Device_ProcessControlRequest+0x52>
     cb8:	99 c0       	rjmp	.+306    	; 0xdec <HID_Device_ProcessControlRequest+0x184>
     cba:	30 f4       	brcc	.+12     	; 0xcc8 <HID_Device_ProcessControlRequest+0x60>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	71 f0       	breq	.+28     	; 0xcdc <HID_Device_ProcessControlRequest+0x74>
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <HID_Device_ProcessControlRequest+0x5e>
     cc4:	d0 c0       	rjmp	.+416    	; 0xe66 <HID_Device_ProcessControlRequest+0x1fe>
     cc6:	eb c0       	rjmp	.+470    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     cc8:	8a 30       	cpi	r24, 0x0A	; 10
     cca:	09 f4       	brne	.+2      	; 0xcce <HID_Device_ProcessControlRequest+0x66>
     ccc:	b4 c0       	rjmp	.+360    	; 0xe36 <HID_Device_ProcessControlRequest+0x1ce>
     cce:	8b 30       	cpi	r24, 0x0B	; 11
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <HID_Device_ProcessControlRequest+0x6c>
     cd2:	9d c0       	rjmp	.+314    	; 0xe0e <HID_Device_ProcessControlRequest+0x1a6>
     cd4:	89 30       	cpi	r24, 0x09	; 9
     cd6:	09 f0       	breq	.+2      	; 0xcda <HID_Device_ProcessControlRequest+0x72>
     cd8:	e2 c0       	rjmp	.+452    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     cda:	4b c0       	rjmp	.+150    	; 0xd72 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     cdc:	80 91 39 01 	lds	r24, 0x0139
     ce0:	81 3a       	cpi	r24, 0xA1	; 161
     ce2:	09 f0       	breq	.+2      	; 0xce6 <HID_Device_ProcessControlRequest+0x7e>
     ce4:	dc c0       	rjmp	.+440    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     ce6:	8d b6       	in	r8, 0x3d	; 61
     ce8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     cea:	1a 82       	std	Y+2, r1	; 0x02
     cec:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     cee:	80 91 3b 01 	lds	r24, 0x013B
     cf2:	10 91 3c 01 	lds	r17, 0x013C
     cf6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     cf8:	f7 01       	movw	r30, r14
     cfa:	40 85       	ldd	r20, Z+8	; 0x08
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	8d b7       	in	r24, 0x3d	; 61
     d00:	9e b7       	in	r25, 0x3e	; 62
     d02:	84 1b       	sub	r24, r20
     d04:	95 0b       	sbc	r25, r21
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	9e bf       	out	0x3e, r25	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	8d bf       	out	0x3d, r24	; 61
     d10:	ed b7       	in	r30, 0x3d	; 61
     d12:	fe b7       	in	r31, 0x3e	; 62
     d14:	31 96       	adiw	r30, 0x01	; 1
     d16:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	cf 01       	movw	r24, r30
     d1e:	bb d1       	rcall	.+886    	; 0x1096 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d20:	4f ef       	ldi	r20, 0xFF	; 255
     d22:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d24:	8e 01       	movw	r16, r28
     d26:	0f 5f       	subi	r16, 0xFF	; 255
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	96 01       	movw	r18, r12
     d2c:	be 01       	movw	r22, r28
     d2e:	6d 5f       	subi	r22, 0xFD	; 253
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	c7 01       	movw	r24, r14
     d34:	b7 da       	rcall	.-2706   	; 0x2a4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d36:	f7 01       	movw	r30, r14
     d38:	86 81       	ldd	r24, Z+6	; 0x06
     d3a:	97 81       	ldd	r25, Z+7	; 0x07
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	21 f0       	breq	.+8      	; 0xd48 <HID_Device_ProcessControlRequest+0xe0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d40:	40 85       	ldd	r20, Z+8	; 0x08
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	b6 01       	movw	r22, r12
     d46:	9e d1       	rcall	.+828    	; 0x1084 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d4c:	80 91 e8 00 	lds	r24, 0x00E8
     d50:	87 7f       	andi	r24, 0xF7	; 247
     d52:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d5a:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d5e:	69 81       	ldd	r22, Y+1	; 0x01
     d60:	7a 81       	ldd	r23, Y+2	; 0x02
     d62:	c6 01       	movw	r24, r12
     d64:	72 db       	rcall	.-2332   	; 0x44a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d66:	80 91 e8 00 	lds	r24, 0x00E8
     d6a:	8b 77       	andi	r24, 0x7B	; 123
     d6c:	80 93 e8 00 	sts	0x00E8, r24
     d70:	37 c0       	rjmp	.+110    	; 0xde0 <HID_Device_ProcessControlRequest+0x178>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d72:	80 91 39 01 	lds	r24, 0x0139
     d76:	81 32       	cpi	r24, 0x21	; 33
     d78:	09 f0       	breq	.+2      	; 0xd7c <HID_Device_ProcessControlRequest+0x114>
     d7a:	91 c0       	rjmp	.+290    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     d7c:	8d b6       	in	r8, 0x3d	; 61
     d7e:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d80:	00 91 3f 01 	lds	r16, 0x013F
     d84:	10 91 40 01 	lds	r17, 0x0140
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d88:	70 90 3b 01 	lds	r7, 0x013B
     d8c:	60 90 3c 01 	lds	r6, 0x013C
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d90:	8d b7       	in	r24, 0x3d	; 61
     d92:	9e b7       	in	r25, 0x3e	; 62
     d94:	80 1b       	sub	r24, r16
     d96:	91 0b       	sbc	r25, r17
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	9e bf       	out	0x3e, r25	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	8d bf       	out	0x3d, r24	; 61
     da2:	ed b7       	in	r30, 0x3d	; 61
     da4:	fe b7       	in	r31, 0x3e	; 62
     da6:	31 96       	adiw	r30, 0x01	; 1
     da8:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     daa:	80 91 e8 00 	lds	r24, 0x00E8
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     db4:	b8 01       	movw	r22, r16
     db6:	cf 01       	movw	r24, r30
     db8:	a9 db       	rcall	.-2222   	; 0x50c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dba:	80 91 e8 00 	lds	r24, 0x00E8
     dbe:	8e 77       	andi	r24, 0x7E	; 126
     dc0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	71 10       	cpse	r7, r1
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <HID_Device_ProcessControlRequest+0x164>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	02 1b       	sub	r16, r18
     dd0:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     dd2:	2c 0d       	add	r18, r12
     dd4:	3d 1d       	adc	r19, r13
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     dd6:	4f ef       	ldi	r20, 0xFF	; 255
     dd8:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     dda:	67 2d       	mov	r22, r7
     ddc:	c7 01       	movw	r24, r14
     dde:	7f da       	rcall	.-2818   	; 0x2de <CALLBACK_HID_Device_ProcessHIDReport>
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	9e be       	out	0x3e, r9	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	8d be       	out	0x3d, r8	; 61
     dea:	59 c0       	rjmp	.+178    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dec:	80 91 39 01 	lds	r24, 0x0139
     df0:	81 3a       	cpi	r24, 0xA1	; 161
     df2:	09 f0       	breq	.+2      	; 0xdf6 <HID_Device_ProcessControlRequest+0x18e>
     df4:	54 c0       	rjmp	.+168    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df6:	80 91 e8 00 	lds	r24, 0x00E8
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e00:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e04:	80 ff       	sbrs	r24, 0
     e06:	fc cf       	rjmp	.-8      	; 0xe00 <HID_Device_ProcessControlRequest+0x198>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e08:	f7 01       	movw	r30, r14
     e0a:	81 85       	ldd	r24, Z+9	; 0x09
     e0c:	40 c0       	rjmp	.+128    	; 0xe8e <HID_Device_ProcessControlRequest+0x226>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e0e:	80 91 39 01 	lds	r24, 0x0139
     e12:	81 32       	cpi	r24, 0x21	; 33
     e14:	09 f0       	breq	.+2      	; 0xe18 <HID_Device_ProcessControlRequest+0x1b0>
     e16:	43 c0       	rjmp	.+134    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e18:	80 91 e8 00 	lds	r24, 0x00E8
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e22:	81 dc       	rcall	.-1790   	; 0x726 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e24:	90 91 3b 01 	lds	r25, 0x013B
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	91 11       	cpse	r25, r1
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <HID_Device_ProcessControlRequest+0x1c8>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	f7 01       	movw	r30, r14
     e32:	81 87       	std	Z+9, r24	; 0x09
     e34:	34 c0       	rjmp	.+104    	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e36:	80 91 39 01 	lds	r24, 0x0139
     e3a:	81 32       	cpi	r24, 0x21	; 33
     e3c:	81 f5       	brne	.+96     	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e48:	6e dc       	rcall	.-1828   	; 0x726 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e4a:	80 91 3b 01 	lds	r24, 0x013B
     e4e:	90 91 3c 01 	lds	r25, 0x013C
     e52:	88 27       	eor	r24, r24
     e54:	36 e0       	ldi	r19, 0x06	; 6
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	3a 95       	dec	r19
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <HID_Device_ProcessControlRequest+0x1ee>
     e5e:	f7 01       	movw	r30, r14
     e60:	95 87       	std	Z+13, r25	; 0x0d
     e62:	84 87       	std	Z+12, r24	; 0x0c
     e64:	1c c0       	rjmp	.+56     	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e66:	80 91 39 01 	lds	r24, 0x0139
     e6a:	81 3a       	cpi	r24, 0xA1	; 161
     e6c:	c1 f4       	brne	.+48     	; 0xe9e <HID_Device_ProcessControlRequest+0x236>
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e78:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <HID_Device_ProcessControlRequest+0x210>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e80:	f7 01       	movw	r30, r14
     e82:	84 85       	ldd	r24, Z+12	; 0x0c
     e84:	95 85       	ldd	r25, Z+13	; 0x0d
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e8e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e92:	80 91 e8 00 	lds	r24, 0x00E8
     e96:	8e 77       	andi	r24, 0x7E	; 126
     e98:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e9c:	44 dc       	rcall	.-1912   	; 0x726 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	be be       	out	0x3e, r11	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	ad be       	out	0x3d, r10	; 61
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
     ec6:	7f 90       	pop	r7
     ec8:	6f 90       	pop	r6
     eca:	08 95       	ret

00000ecc <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     ecc:	fc 01       	movw	r30, r24
     ece:	39 96       	adiw	r30, 0x09	; 9
     ed0:	27 e0       	ldi	r18, 0x07	; 7
     ed2:	df 01       	movw	r26, r30
     ed4:	1d 92       	st	X+, r1
     ed6:	2a 95       	dec	r18
     ed8:	e9 f7       	brne	.-6      	; 0xed4 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	fc 01       	movw	r30, r24
     ede:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     ee0:	24 ef       	ldi	r18, 0xF4	; 244
     ee2:	31 e0       	ldi	r19, 0x01	; 1
     ee4:	35 87       	std	Z+13, r19	; 0x0d
     ee6:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     ee8:	23 e0       	ldi	r18, 0x03	; 3
     eea:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	de cb       	rjmp	.-2116   	; 0x6ae <Endpoint_ConfigureEndpointTable>

00000ef2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	00 d0       	rcall	.+0      	; 0xf12 <HID_Device_USBTask+0x20>
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     f1a:	ad b6       	in	r10, 0x3d	; 61
     f1c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f1e:	8e b3       	in	r24, 0x1e	; 30
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	09 f0       	breq	.+2      	; 0xf26 <HID_Device_USBTask+0x34>
     f24:	8a c0       	rjmp	.+276    	; 0x103a <HID_Device_USBTask+0x148>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f26:	80 91 e4 00 	lds	r24, 0x00E4
     f2a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     f2e:	f7 01       	movw	r30, r14
     f30:	22 85       	ldd	r18, Z+10	; 0x0a
     f32:	33 85       	ldd	r19, Z+11	; 0x0b
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	09 f4       	brne	.+2      	; 0xf3c <HID_Device_USBTask+0x4a>
     f3a:	7f c0       	rjmp	.+254    	; 0x103a <HID_Device_USBTask+0x148>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f3c:	81 81       	ldd	r24, Z+1	; 0x01
     f3e:	8f 70       	andi	r24, 0x0F	; 15
     f40:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f44:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     f48:	85 ff       	sbrs	r24, 5
     f4a:	77 c0       	rjmp	.+238    	; 0x103a <HID_Device_USBTask+0x148>
     f4c:	8d b6       	in	r8, 0x3d	; 61
     f4e:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f50:	40 85       	ldd	r20, Z+8	; 0x08
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	8d b7       	in	r24, 0x3d	; 61
     f56:	9e b7       	in	r25, 0x3e	; 62
     f58:	84 1b       	sub	r24, r20
     f5a:	95 0b       	sbc	r25, r21
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	9e bf       	out	0x3e, r25	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	8d bf       	out	0x3d, r24	; 61
     f66:	ed b7       	in	r30, 0x3d	; 61
     f68:	fe b7       	in	r31, 0x3e	; 62
     f6a:	31 96       	adiw	r30, 0x01	; 1
     f6c:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     f6e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f70:	1a 82       	std	Y+2, r1	; 0x02
     f72:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	cf 01       	movw	r24, r30
     f7a:	8d d0       	rcall	.+282    	; 0x1096 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f7c:	8e 01       	movw	r16, r28
     f7e:	0f 5f       	subi	r16, 0xFF	; 255
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	96 01       	movw	r18, r12
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	be 01       	movw	r22, r28
     f88:	6d 5f       	subi	r22, 0xFD	; 253
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	c7 01       	movw	r24, r14
     f8e:	8a d9       	rcall	.-3308   	; 0x2a4 <CALLBACK_HID_Device_CreateHIDReport>
     f90:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f92:	f7 01       	movw	r30, r14
     f94:	84 85       	ldd	r24, Z+12	; 0x0c
     f96:	95 85       	ldd	r25, Z+13	; 0x0d
     f98:	89 2b       	or	r24, r25
     f9a:	41 f0       	breq	.+16     	; 0xfac <HID_Device_USBTask+0xba>
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	86 85       	ldd	r24, Z+14	; 0x0e
     fa0:	97 85       	ldd	r25, Z+15	; 0x0f
     fa2:	89 2b       	or	r24, r25
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <HID_Device_USBTask+0xb6>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	72 2e       	mov	r7, r18
     faa:	01 c0       	rjmp	.+2      	; 0xfae <HID_Device_USBTask+0xbc>
     fac:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     fae:	f7 01       	movw	r30, r14
     fb0:	06 81       	ldd	r16, Z+6	; 0x06
     fb2:	17 81       	ldd	r17, Z+7	; 0x07
     fb4:	01 15       	cp	r16, r1
     fb6:	11 05       	cpc	r17, r1
     fb8:	89 f0       	breq	.+34     	; 0xfdc <HID_Device_USBTask+0xea>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     fba:	49 81       	ldd	r20, Y+1	; 0x01
     fbc:	5a 81       	ldd	r21, Y+2	; 0x02
     fbe:	b8 01       	movw	r22, r16
     fc0:	c6 01       	movw	r24, r12
     fc2:	53 d0       	rcall	.+166    	; 0x106a <memcmp>
     fc4:	55 24       	eor	r5, r5
     fc6:	53 94       	inc	r5
     fc8:	89 2b       	or	r24, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <HID_Device_USBTask+0xdc>
     fcc:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     fce:	f7 01       	movw	r30, r14
     fd0:	40 85       	ldd	r20, Z+8	; 0x08
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	b6 01       	movw	r22, r12
     fd6:	c8 01       	movw	r24, r16
     fd8:	55 d0       	rcall	.+170    	; 0x1084 <memcpy>
     fda:	01 c0       	rjmp	.+2      	; 0xfde <HID_Device_USBTask+0xec>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     fdc:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	23 2b       	or	r18, r19
     fe4:	f1 f0       	breq	.+60     	; 0x1022 <HID_Device_USBTask+0x130>
     fe6:	61 10       	cpse	r6, r1
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <HID_Device_USBTask+0x100>
     fea:	51 10       	cpse	r5, r1
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <HID_Device_USBTask+0x100>
     fee:	70 fe       	sbrs	r7, 0
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <HID_Device_USBTask+0x130>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     ff2:	f7 01       	movw	r30, r14
     ff4:	84 85       	ldd	r24, Z+12	; 0x0c
     ff6:	95 85       	ldd	r25, Z+13	; 0x0d
     ff8:	97 87       	std	Z+15, r25	; 0x0f
     ffa:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ffc:	81 81       	ldd	r24, Z+1	; 0x01
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1008:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    100c:	69 81       	ldd	r22, Y+1	; 0x01
    100e:	7a 81       	ldd	r23, Y+2	; 0x02
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	c6 01       	movw	r24, r12
    1016:	d1 d9       	rcall	.-3166   	; 0x3ba <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1018:	80 91 e8 00 	lds	r24, 0x00E8
    101c:	8e 77       	andi	r24, 0x7E	; 126
    101e:	80 93 e8 00 	sts	0x00E8, r24
    1022:	80 91 e4 00 	lds	r24, 0x00E4
    1026:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    102a:	f7 01       	movw	r30, r14
    102c:	93 87       	std	Z+11, r25	; 0x0b
    102e:	82 87       	std	Z+10, r24	; 0x0a
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	9e be       	out	0x3e, r9	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	8d be       	out	0x3d, r8	; 61
	}
}
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	be be       	out	0x3e, r11	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	ad be       	out	0x3d, r10	; 61
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	9f 90       	pop	r9
    1060:	8f 90       	pop	r8
    1062:	7f 90       	pop	r7
    1064:	6f 90       	pop	r6
    1066:	5f 90       	pop	r5
    1068:	08 95       	ret

0000106a <memcmp>:
    106a:	fb 01       	movw	r30, r22
    106c:	dc 01       	movw	r26, r24
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <memcmp+0xe>
    1070:	8d 91       	ld	r24, X+
    1072:	01 90       	ld	r0, Z+
    1074:	80 19       	sub	r24, r0
    1076:	21 f4       	brne	.+8      	; 0x1080 <memcmp+0x16>
    1078:	41 50       	subi	r20, 0x01	; 1
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	c8 f7       	brcc	.-14     	; 0x1070 <memcmp+0x6>
    107e:	88 1b       	sub	r24, r24
    1080:	99 0b       	sbc	r25, r25
    1082:	08 95       	ret

00001084 <memcpy>:
    1084:	fb 01       	movw	r30, r22
    1086:	dc 01       	movw	r26, r24
    1088:	02 c0       	rjmp	.+4      	; 0x108e <memcpy+0xa>
    108a:	01 90       	ld	r0, Z+
    108c:	0d 92       	st	X+, r0
    108e:	41 50       	subi	r20, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	d8 f7       	brcc	.-10     	; 0x108a <memcpy+0x6>
    1094:	08 95       	ret

00001096 <memset>:
    1096:	dc 01       	movw	r26, r24
    1098:	01 c0       	rjmp	.+2      	; 0x109c <memset+0x6>
    109a:	6d 93       	st	X+, r22
    109c:	41 50       	subi	r20, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	e0 f7       	brcc	.-8      	; 0x109a <memset+0x4>
    10a2:	08 95       	ret

000010a4 <_exit>:
    10a4:	f8 94       	cli

000010a6 <__stop_program>:
    10a6:	ff cf       	rjmp	.-2      	; 0x10a6 <__stop_program>
