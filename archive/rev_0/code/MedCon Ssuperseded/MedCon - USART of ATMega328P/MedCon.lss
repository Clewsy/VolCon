
MedCon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000aa  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000026d  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a1  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ee  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000064  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#include <MedCon_Support.h>

int main(void)
{
	initClock();							//Initialise the system clock.
  96:	0e 94 ac 00 	call	0x158	; 0x158 <initClock>
	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <initUSART>
	printString("\r\n\n\nHello World\r\n");	//Initialisation test for USART.
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 79 00 	call	0xf2	; 0xf2 <printString>
	printString("\r\n\n\nThe quick brown fox jumped over the lazy dog.\r\n");	//Initialisation test for USART.
  a6:	82 e1       	ldi	r24, 0x12	; 18
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 79 00 	call	0xf2	; 0xf2 <printString>
	
	sei();									//Global enable interrupts (from avr/interrupt.h)
  ae:	78 94       	sei
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x1a>

000000b2 <initUSART>:

//Initialise the USART peripheral
void initUSART(void)
{
	//Utilising USART0
	UBRR0H = UBRRH_VALUE;	//USART Baud Rate Register High -Value defined in util/setbaud.h
  b2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;	//USART Baud Rate Register Low  -Value defined in util/setbaud.h
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	80 93 c4 00 	sts	0x00C4, r24

	#if USE_2X						//Double-Speed detemined in util/setbaud.h.  Needed is defined BAUD not achieavable without U2X0 
		UCSR0A |= (1 << U2X0);		//UCSR0A = USART 0 Control and Status Register A
	#else							//U2X0 = Double USART 0 Transmission Speed Enable
		UCSR0A &= ~(1 << U2X0);
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	80 83       	st	Z, r24
	#endif
	
	UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);		//UCSR0B = USART 0 Control and Status Register B
  c6:	88 e9       	ldi	r24, 0x98	; 152
  c8:	80 93 c1 00 	sts	0x00C1, r24
																//RXCIE0 = USART 0 RX Complete Interrupt Enable
																//TXEN0 = Transmit Enable USART0
																//RXEN0 = Receive Enable USART0
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);					//UCSR0C = USART 0 Control and Status Register C
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	80 93 c2 00 	sts	0x00C2, r24
																//UCSZ02:0 = Usart Character Size, Set to 0b011 for 8-bit.
																//(USBS = Usart Stop Bit Select, Stays at 0b0 for 1 stop bit)
}
  d2:	08 95       	ret

000000d4 <receiveByte>:

//Sets a variable to whatever was received by the USART
uint8_t receiveByte(void)
{

	while (!(UCSR0A & (1 << RXC0))) {}		//Wait until the USART 0 receive complete flag is set 
  d4:	80 91 c0 00 	lds	r24, 0x00C0
  d8:	87 ff       	sbrs	r24, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <receiveByte>
	return UDR0;							//Returns received data.  UDR0 = USART 0 Data Register
  dc:	80 91 c6 00 	lds	r24, 0x00C6
}
  e0:	08 95       	ret

000000e2 <transmitByte>:

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
  e2:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
  e4:	80 91 c0 00 	lds	r24, 0x00C0
  e8:	85 ff       	sbrs	r24, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <transmitByte+0x2>
	UDR0 = data;							//UDR0 = USART 0 Data Register
  ec:	90 93 c6 00 	sts	0x00C6, r25
}
  f0:	08 95       	ret

000000f2 <printString>:

//Transmits a string of characters.
void printString(const char string[])
{			
  f2:	ac 01       	movw	r20, r24
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	07 c0       	rjmp	.+14     	; 0x106 <printString+0x14>
}

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
  f8:	80 91 c0 00 	lds	r24, 0x00C0
  fc:	85 ff       	sbrs	r24, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <printString+0x6>
	UDR0 = data;							//UDR0 = USART 0 Data Register
 100:	e0 93 c6 00 	sts	0x00C6, r30
{			
	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')				//Until null character (end of string).
	{
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
 104:	2f 5f       	subi	r18, 0xFF	; 255

//Transmits a string of characters.
void printString(const char string[])
{			
	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')				//Until null character (end of string).
 106:	fa 01       	movw	r30, r20
 108:	e2 0f       	add	r30, r18
 10a:	f1 1d       	adc	r31, r1
 10c:	e0 81       	ld	r30, Z
 10e:	ee 23       	and	r30, r30
 110:	99 f7       	brne	.-26     	; 0xf8 <printString+0x6>
	{
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
	}
}
 112:	08 95       	ret

00000114 <printByte>:

//Takes an integer and transmits the characters
void printByte(uint8_t byte)
{
 114:	28 2f       	mov	r18, r24
	//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 116:	80 91 c0 00 	lds	r24, 0x00C0
 11a:	85 ff       	sbrs	r24, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <printByte+0x2>
}

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
 11e:	80 91 c0 00 	lds	r24, 0x00C0
 122:	85 ff       	sbrs	r24, 5
 124:	fc cf       	rjmp	.-8      	; 0x11e <printByte+0xa>
{
	//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
 126:	82 2f       	mov	r24, r18
 128:	6a e0       	ldi	r22, 0x0A	; 10
 12a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodqi4>
 12e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodqi4>
 132:	90 5d       	subi	r25, 0xD0	; 208

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
	UDR0 = data;							//UDR0 = USART 0 Data Register
 134:	90 93 c6 00 	sts	0x00C6, r25
	//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 138:	80 91 c0 00 	lds	r24, 0x00C0
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <printByte+0x24>
}

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
 140:	80 91 c0 00 	lds	r24, 0x00C0
 144:	85 ff       	sbrs	r24, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <printByte+0x2c>
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 148:	82 2f       	mov	r24, r18
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodqi4>
 150:	90 5d       	subi	r25, 0xD0	; 208

//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
	UDR0 = data;							//UDR0 = USART 0 Data Register
 152:	90 93 c6 00 	sts	0x00C6, r25
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 156:	08 95       	ret

00000158 <initClock>:

//The following function initialises the system clock
void initClock(void)
{
	//CLKPR: Clock Prescale Register.  Pre-scale the system clock.  The following setup will disable prescaling so the system clock will be the full 8MHz internal frequency (default is 1MHz).
	CLKPR = (1 << CLKPCE);		//CLKPCE: Clock Prescaler Change Enable.  Must set to one to enable changes to clock prescaler bits.
 158:	e1 e6       	ldi	r30, 0x61	; 97
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	80 83       	st	Z, r24
	CLKPR = 0;					//Once CLKPCE is enabled, Clock Prescaler Select Bits can be changed if done within 4 cycles.  In this case, clear all for prescaler value 1 (i.e. 8MHz system).
 160:	10 82       	st	Z, r1
}
 162:	08 95       	ret

00000164 <__vector_18>:

#include <MedCon_Support.h>

//Interrupt subroutine triggered whenever the AVR receives a byte on the serial line (USART).  This was used for debugging.
ISR(USART_RX_vect)	//Interrupt subroutine triggered when the USART receives a byte.
{					
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	transmitByte(receiveByte());	//Echos received byte.
 186:	0e 94 6a 00 	call	0xd4	; 0xd4 <receiveByte>
 18a:	0e 94 71 00 	call	0xe2	; 0xe2 <transmitByte>
	printString(" Ouch!\r\n");	//Echos received byte.
 18e:	86 e4       	ldi	r24, 0x46	; 70
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <printString>
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__udivmodqi4>:
 1b8:	99 1b       	sub	r25, r25
 1ba:	79 e0       	ldi	r23, 0x09	; 9
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <__udivmodqi4_ep>

000001be <__udivmodqi4_loop>:
 1be:	99 1f       	adc	r25, r25
 1c0:	96 17       	cp	r25, r22
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__udivmodqi4_ep>
 1c4:	96 1b       	sub	r25, r22

000001c6 <__udivmodqi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	7a 95       	dec	r23
 1ca:	c9 f7       	brne	.-14     	; 0x1be <__udivmodqi4_loop>
 1cc:	80 95       	com	r24
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
