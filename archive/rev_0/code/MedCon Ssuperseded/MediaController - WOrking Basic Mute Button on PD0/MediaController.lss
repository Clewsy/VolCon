
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f70  00001004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800110  00800110  00001014  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d08  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012a8  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f65  00000000  00000000  0000726c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000740  00000000  00000000  0000a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f73  00000000  00000000  0000a914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002fa4  00000000  00000000  0000c887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000468  00000000  00000000  0000f82b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
   2:	00 00       	nop
   4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
   6:	00 00       	nop
   8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
   a:	00 00       	nop
   c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
   e:	00 00       	nop
  10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
  12:	00 00       	nop
  14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
  16:	00 00       	nop
  18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
  1e:	00 00       	nop
  20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
  22:	00 00       	nop
  24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
  26:	00 00       	nop
  28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	75 c3       	rjmp	.+1770   	; 0x718 <__vector_11>
  2e:	00 00       	nop
  30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
  32:	00 00       	nop
  34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
  36:	00 00       	nop
  38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
  42:	00 00       	nop
  44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
  46:	00 00       	nop
  48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
  4e:	00 00       	nop
  50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
  52:	00 00       	nop
  54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
  56:	00 00       	nop
  58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
  62:	00 00       	nop
  64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
  66:	00 00       	nop
  68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
  6e:	00 00       	nop
  70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.
  84:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.
  94:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00           r.o.l.l.e.r...

000000a2 <ManufacturerString>:
  a2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  b2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000bc <LanguageString>:
  bc:	04 03 09 04                                         ....

000000c0 <ConfigurationDescriptor>:
  c0:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  d0:	00 00 09 21 11 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
  e0:	00 05                                               ..

000000e2 <DeviceDescriptor>:
  e2:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
  f2:	00 01                                               ..

000000f4 <MediaControlReport>:
  f4:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
 104:	09 b6 09 b7 09 cd 09 e2 09 e9 09 ea 75 01 95 0b     ............u...
 114:	15 00 25 01 81 06 95 05 81 01 c0 00                 ..%.........

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d4 e0       	ldi	r29, 0x04	; 4
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	11 e0       	ldi	r17, 0x01	; 1
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	e0 e7       	ldi	r30, 0x70	; 112
 134:	ff e0       	ldi	r31, 0x0F	; 15
 136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
 138:	05 90       	lpm	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	a0 31       	cpi	r26, 0x10	; 16
 13e:	b1 07       	cpc	r27, r17
 140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	a0 e1       	ldi	r26, 0x10	; 16
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
 14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
 14c:	ae 31       	cpi	r26, 0x1E	; 30
 14e:	b2 07       	cpc	r27, r18
 150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
 152:	17 d0       	rcall	.+46     	; 0x182 <main>
 154:	0b c7       	rjmp	.+3606   	; 0xf6c <_exit>

00000156 <__bad_interrupt>:
 156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 158:	84 b7       	in	r24, 0x34	; 52
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	80 93 60 00 	sts	0x0060, r24
 168:	10 92 60 00 	sts	0x0060, r1
 16c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	80 93 61 00 	sts	0x0061, r24
 17a:	90 93 61 00 	sts	0x0061, r25
 17e:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 180:	bc c2       	rjmp	.+1400   	; 0x6fa <USB_Init>

00000182 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 182:	ea df       	rcall	.-44     	; 0x158 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 184:	78 94       	sei

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	
	DDRD = 0; //Inputs
 186:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; //Pull-ups enabled
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	8b b9       	out	0x0b, r24	; 11
	
	

	for (;;)
	{
		HID_Device_USBTask(&MediaControl_HID_Interface);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	14 d6       	rcall	.+3112   	; 0xdba <HID_Device_USBTask>
		USB_USBTask();
 192:	b3 d4       	rcall	.+2406   	; 0xafa <USB_USBTask>
 194:	fb cf       	rjmp	.-10     	; 0x18c <main+0xa>

00000196 <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 196:	08 95       	ret

00000198 <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 198:	08 95       	ret

0000019a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&MediaControl_HID_Interface);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	fa d5       	rcall	.+3060   	; 0xd94 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 1a0:	e2 ee       	ldi	r30, 0xE2	; 226
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&MediaControl_HID_Interface);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	bf c4       	rjmp	.+2430   	; 0xb30 <HID_Device_ProcessControlRequest>

000001b2 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 1b2:	80 91 0e 01 	lds	r24, 0x010E
 1b6:	90 91 0f 01 	lds	r25, 0x010F
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	90 93 0f 01 	sts	0x010F, r25
 1c4:	80 93 0e 01 	sts	0x010E, r24
 1c8:	08 95       	ret

000001ca <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	f9 01       	movw	r30, r18

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Update the Media Control report with the user button presses */
	MediaReport->Mute          = ((bit_is_clear(PIND, PD0)) ? true : false);
 1d0:	89 b1       	in	r24, 0x09	; 9
 1d2:	80 95       	com	r24
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	80 fb       	bst	r24, 0
 1d8:	90 f9       	bld	r25, 0
	MediaReport->PlayPause     = ((JoyStatus_LCL & JOY_PRESS) ? true : false);
 1da:	80 81       	ld	r24, Z
	MediaReport->VolumeUp      = ((JoyStatus_LCL & JOY_UP)    ? true : false);
	MediaReport->VolumeDown    = ((JoyStatus_LCL & JOY_DOWN)  ? true : false);
 1dc:	9d 7f       	andi	r25, 0xFD	; 253
 1de:	9b 7f       	andi	r25, 0xFB	; 251
 1e0:	91 83       	std	Z+1, r25	; 0x01
	MediaReport->PreviousTrack = ((JoyStatus_LCL & JOY_LEFT)  ? true : false);
	MediaReport->NextTrack     = ((JoyStatus_LCL & JOY_RIGHT) ? true : false);
 1e2:	8f 75       	andi	r24, 0x5F	; 95
 1e4:	8f 7e       	andi	r24, 0xEF	; 239
 1e6:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MediaReport_Data_t);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	f8 01       	movw	r30, r16
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
	return false;
}
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 1fa:	08 95       	ret

000001fc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 1fc:	29 2f       	mov	r18, r25
 1fe:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 200:	23 30       	cpi	r18, 0x03	; 3
 202:	31 05       	cpc	r19, r1
 204:	b9 f0       	breq	.+46     	; 0x234 <CALLBACK_USB_GetDescriptor+0x38>
 206:	5c f4       	brge	.+22     	; 0x21e <CALLBACK_USB_GetDescriptor+0x22>
 208:	21 30       	cpi	r18, 0x01	; 1
 20a:	31 05       	cpc	r19, r1
 20c:	69 f1       	breq	.+90     	; 0x268 <CALLBACK_USB_GetDescriptor+0x6c>
 20e:	22 30       	cpi	r18, 0x02	; 2
 210:	31 05       	cpc	r19, r1
 212:	79 f5       	brne	.+94     	; 0x272 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 214:	82 e2       	ldi	r24, 0x22	; 34
 216:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 218:	20 ec       	ldi	r18, 0xC0	; 192
 21a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 21c:	2e c0       	rjmp	.+92     	; 0x27a <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 21e:	21 32       	cpi	r18, 0x21	; 33
 220:	31 05       	cpc	r19, r1
 222:	e9 f0       	breq	.+58     	; 0x25e <CALLBACK_USB_GetDescriptor+0x62>
 224:	22 32       	cpi	r18, 0x22	; 34
 226:	31 05       	cpc	r19, r1
 228:	21 f5       	brne	.+72     	; 0x272 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
 22a:	8b e2       	ldi	r24, 0x2B	; 43
 22c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
 22e:	24 ef       	ldi	r18, 0xF4	; 244
 230:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(MediaControlReport);
			break;
 232:	23 c0       	rjmp	.+70     	; 0x27a <CALLBACK_USB_GetDescriptor+0x7e>
 234:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	41 f0       	breq	.+16     	; 0x24c <CALLBACK_USB_GetDescriptor+0x50>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	91 05       	cpc	r25, r1
 240:	41 f0       	breq	.+16     	; 0x252 <CALLBACK_USB_GetDescriptor+0x56>
 242:	89 2b       	or	r24, r25
 244:	b1 f4       	brne	.+44     	; 0x272 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 246:	ec eb       	ldi	r30, 0xBC	; 188
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	05 c0       	rjmp	.+10     	; 0x256 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 24c:	e2 ea       	ldi	r30, 0xA2	; 162
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 252:	e4 e7       	ldi	r30, 0x74	; 116
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	84 91       	lpm	r24, Z
 258:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 25a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 25c:	0e c0       	rjmp	.+28     	; 0x27a <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 25e:	89 e0       	ldi	r24, 0x09	; 9
 260:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
 262:	22 ed       	ldi	r18, 0xD2	; 210
 264:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 266:	09 c0       	rjmp	.+18     	; 0x27a <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 268:	82 e1       	ldi	r24, 0x12	; 18
 26a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 26c:	22 ee       	ldi	r18, 0xE2	; 226
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	04 c0       	rjmp	.+8      	; 0x27a <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
			break;
	}

	*DescriptorAddress = Address;
 27a:	fa 01       	movw	r30, r20
 27c:	31 83       	std	Z+1, r19	; 0x01
 27e:	20 83       	st	Z, r18
	return Size;
}
 280:	08 95       	ret

00000282 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	7c 01       	movw	r14, r24
 294:	8b 01       	movw	r16, r22
 296:	ea 01       	movw	r28, r20
 298:	c9 d1       	rcall	.+914    	; 0x62c <Endpoint_WaitUntilReady>
 29a:	81 11       	cpse	r24, r1
 29c:	31 c0       	rjmp	.+98     	; 0x300 <Endpoint_Write_Stream_LE+0x7e>
 29e:	20 97       	sbiw	r28, 0x00	; 0
 2a0:	31 f0       	breq	.+12     	; 0x2ae <Endpoint_Write_Stream_LE+0x2c>
 2a2:	88 81       	ld	r24, Y
 2a4:	99 81       	ldd	r25, Y+1	; 0x01
 2a6:	08 1b       	sub	r16, r24
 2a8:	19 0b       	sbc	r17, r25
 2aa:	e8 0e       	add	r14, r24
 2ac:	f9 1e       	adc	r15, r25
 2ae:	c1 2c       	mov	r12, r1
 2b0:	d1 2c       	mov	r13, r1
 2b2:	01 15       	cp	r16, r1
 2b4:	11 05       	cpc	r17, r1
 2b6:	19 f1       	breq	.+70     	; 0x2fe <Endpoint_Write_Stream_LE+0x7c>
 2b8:	80 91 e8 00 	lds	r24, 0x00E8
 2bc:	85 fd       	sbrc	r24, 5
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <Endpoint_Write_Stream_LE+0x66>
 2c0:	80 91 e8 00 	lds	r24, 0x00E8
 2c4:	8e 77       	andi	r24, 0x7E	; 126
 2c6:	80 93 e8 00 	sts	0x00E8, r24
 2ca:	17 d4       	rcall	.+2094   	; 0xafa <USB_USBTask>
 2cc:	20 97       	sbiw	r28, 0x00	; 0
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <Endpoint_Write_Stream_LE+0x5e>
 2d0:	88 81       	ld	r24, Y
 2d2:	99 81       	ldd	r25, Y+1	; 0x01
 2d4:	8c 0d       	add	r24, r12
 2d6:	9d 1d       	adc	r25, r13
 2d8:	99 83       	std	Y+1, r25	; 0x01
 2da:	88 83       	st	Y, r24
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	10 c0       	rjmp	.+32     	; 0x300 <Endpoint_Write_Stream_LE+0x7e>
 2e0:	a5 d1       	rcall	.+842    	; 0x62c <Endpoint_WaitUntilReady>
 2e2:	88 23       	and	r24, r24
 2e4:	31 f3       	breq	.-52     	; 0x2b2 <Endpoint_Write_Stream_LE+0x30>
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <Endpoint_Write_Stream_LE+0x7e>
 2e8:	f7 01       	movw	r30, r14
 2ea:	81 91       	ld	r24, Z+
 2ec:	7f 01       	movw	r14, r30
 2ee:	80 93 f1 00 	sts	0x00F1, r24
 2f2:	01 50       	subi	r16, 0x01	; 1
 2f4:	11 09       	sbc	r17, r1
 2f6:	ff ef       	ldi	r31, 0xFF	; 255
 2f8:	cf 1a       	sub	r12, r31
 2fa:	df 0a       	sbc	r13, r31
 2fc:	da cf       	rjmp	.-76     	; 0x2b2 <Endpoint_Write_Stream_LE+0x30>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

00000312 <Endpoint_Write_Control_Stream_LE>:
 312:	20 91 1c 01 	lds	r18, 0x011C
 316:	30 91 1d 01 	lds	r19, 0x011D
 31a:	26 17       	cp	r18, r22
 31c:	37 07       	cpc	r19, r23
 31e:	48 f0       	brcs	.+18     	; 0x332 <Endpoint_Write_Control_Stream_LE+0x20>
 320:	61 15       	cp	r22, r1
 322:	71 05       	cpc	r23, r1
 324:	39 f4       	brne	.+14     	; 0x334 <Endpoint_Write_Control_Stream_LE+0x22>
 326:	20 91 e8 00 	lds	r18, 0x00E8
 32a:	2e 77       	andi	r18, 0x7E	; 126
 32c:	20 93 e8 00 	sts	0x00E8, r18
 330:	01 c0       	rjmp	.+2      	; 0x334 <Endpoint_Write_Control_Stream_LE+0x22>
 332:	b9 01       	movw	r22, r18
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	61 15       	cp	r22, r1
 338:	71 05       	cpc	r23, r1
 33a:	c9 f1       	breq	.+114    	; 0x3ae <Endpoint_Write_Control_Stream_LE+0x9c>
 33c:	3e b3       	in	r19, 0x1e	; 30
 33e:	33 23       	and	r19, r19
 340:	09 f4       	brne	.+2      	; 0x344 <Endpoint_Write_Control_Stream_LE+0x32>
 342:	42 c0       	rjmp	.+132    	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0xb6>
 344:	35 30       	cpi	r19, 0x05	; 5
 346:	09 f4       	brne	.+2      	; 0x34a <Endpoint_Write_Control_Stream_LE+0x38>
 348:	41 c0       	rjmp	.+130    	; 0x3cc <Endpoint_Write_Control_Stream_LE+0xba>
 34a:	30 91 e8 00 	lds	r19, 0x00E8
 34e:	33 fd       	sbrc	r19, 3
 350:	3f c0       	rjmp	.+126    	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0xbe>
 352:	30 91 e8 00 	lds	r19, 0x00E8
 356:	32 ff       	sbrs	r19, 2
 358:	06 c0       	rjmp	.+12     	; 0x366 <Endpoint_Write_Control_Stream_LE+0x54>
 35a:	80 91 e8 00 	lds	r24, 0x00E8
 35e:	82 ff       	sbrs	r24, 2
 360:	29 c0       	rjmp	.+82     	; 0x3b4 <Endpoint_Write_Control_Stream_LE+0xa2>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	30 91 e8 00 	lds	r19, 0x00E8
 36a:	30 ff       	sbrs	r19, 0
 36c:	e4 cf       	rjmp	.-56     	; 0x336 <Endpoint_Write_Control_Stream_LE+0x24>
 36e:	20 91 f2 00 	lds	r18, 0x00F2
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	28 1b       	sub	r18, r24
 378:	39 0b       	sbc	r19, r25
 37a:	cf 01       	movw	r24, r30
 37c:	82 0f       	add	r24, r18
 37e:	93 1f       	adc	r25, r19
 380:	61 15       	cp	r22, r1
 382:	71 05       	cpc	r23, r1
 384:	49 f0       	breq	.+18     	; 0x398 <Endpoint_Write_Control_Stream_LE+0x86>
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	91 05       	cpc	r25, r1
 38a:	30 f4       	brcc	.+12     	; 0x398 <Endpoint_Write_Control_Stream_LE+0x86>
 38c:	81 91       	ld	r24, Z+
 38e:	80 93 f1 00 	sts	0x00F1, r24
 392:	61 50       	subi	r22, 0x01	; 1
 394:	71 09       	sbc	r23, r1
 396:	f1 cf       	rjmp	.-30     	; 0x37a <Endpoint_Write_Control_Stream_LE+0x68>
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	08 97       	sbiw	r24, 0x08	; 8
 39c:	09 f0       	breq	.+2      	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0x8e>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	8e 77       	andi	r24, 0x7E	; 126
 3a6:	80 93 e8 00 	sts	0x00E8, r24
 3aa:	cf 01       	movw	r24, r30
 3ac:	c4 cf       	rjmp	.-120    	; 0x336 <Endpoint_Write_Control_Stream_LE+0x24>
 3ae:	21 11       	cpse	r18, r1
 3b0:	c5 cf       	rjmp	.-118    	; 0x33c <Endpoint_Write_Control_Stream_LE+0x2a>
 3b2:	d3 cf       	rjmp	.-90     	; 0x35a <Endpoint_Write_Control_Stream_LE+0x48>
 3b4:	8e b3       	in	r24, 0x1e	; 30
 3b6:	88 23       	and	r24, r24
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0xb6>
 3ba:	85 30       	cpi	r24, 0x05	; 5
 3bc:	39 f0       	breq	.+14     	; 0x3cc <Endpoint_Write_Control_Stream_LE+0xba>
 3be:	80 91 e8 00 	lds	r24, 0x00E8
 3c2:	83 ff       	sbrs	r24, 3
 3c4:	ca cf       	rjmp	.-108    	; 0x35a <Endpoint_Write_Control_Stream_LE+0x48>
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0xbe>
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	08 95       	ret
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	08 95       	ret
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret

000003d4 <Endpoint_Read_Control_Stream_LE>:
 3d4:	61 15       	cp	r22, r1
 3d6:	71 05       	cpc	r23, r1
 3d8:	29 f4       	brne	.+10     	; 0x3e4 <Endpoint_Read_Control_Stream_LE+0x10>
 3da:	20 91 e8 00 	lds	r18, 0x00E8
 3de:	2b 77       	andi	r18, 0x7B	; 123
 3e0:	20 93 e8 00 	sts	0x00E8, r18
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	11 f1       	breq	.+68     	; 0x42e <Endpoint_Read_Control_Stream_LE+0x5a>
 3ea:	2e b3       	in	r18, 0x1e	; 30
 3ec:	22 23       	and	r18, r18
 3ee:	41 f1       	breq	.+80     	; 0x440 <Endpoint_Read_Control_Stream_LE+0x6c>
 3f0:	25 30       	cpi	r18, 0x05	; 5
 3f2:	41 f1       	breq	.+80     	; 0x444 <Endpoint_Read_Control_Stream_LE+0x70>
 3f4:	20 91 e8 00 	lds	r18, 0x00E8
 3f8:	23 fd       	sbrc	r18, 3
 3fa:	1e c0       	rjmp	.+60     	; 0x438 <Endpoint_Read_Control_Stream_LE+0x64>
 3fc:	20 91 e8 00 	lds	r18, 0x00E8
 400:	22 ff       	sbrs	r18, 2
 402:	f3 cf       	rjmp	.-26     	; 0x3ea <Endpoint_Read_Control_Stream_LE+0x16>
 404:	fc 01       	movw	r30, r24
 406:	cf 01       	movw	r24, r30
 408:	20 91 f2 00 	lds	r18, 0x00F2
 40c:	22 23       	and	r18, r18
 40e:	29 f3       	breq	.-54     	; 0x3da <Endpoint_Read_Control_Stream_LE+0x6>
 410:	80 91 f1 00 	lds	r24, 0x00F1
 414:	81 93       	st	Z+, r24
 416:	cf 01       	movw	r24, r30
 418:	61 50       	subi	r22, 0x01	; 1
 41a:	71 09       	sbc	r23, r1
 41c:	61 15       	cp	r22, r1
 41e:	71 05       	cpc	r23, r1
 420:	91 f7       	brne	.-28     	; 0x406 <Endpoint_Read_Control_Stream_LE+0x32>
 422:	db cf       	rjmp	.-74     	; 0x3da <Endpoint_Read_Control_Stream_LE+0x6>
 424:	8e b3       	in	r24, 0x1e	; 30
 426:	88 23       	and	r24, r24
 428:	59 f0       	breq	.+22     	; 0x440 <Endpoint_Read_Control_Stream_LE+0x6c>
 42a:	85 30       	cpi	r24, 0x05	; 5
 42c:	59 f0       	breq	.+22     	; 0x444 <Endpoint_Read_Control_Stream_LE+0x70>
 42e:	80 91 e8 00 	lds	r24, 0x00E8
 432:	80 ff       	sbrs	r24, 0
 434:	f7 cf       	rjmp	.-18     	; 0x424 <Endpoint_Read_Control_Stream_LE+0x50>
 436:	02 c0       	rjmp	.+4      	; 0x43c <Endpoint_Read_Control_Stream_LE+0x68>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	08 95       	ret
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	08 95       	ret

00000448 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 448:	20 91 1c 01 	lds	r18, 0x011C
 44c:	30 91 1d 01 	lds	r19, 0x011D
 450:	26 17       	cp	r18, r22
 452:	37 07       	cpc	r19, r23
 454:	48 f0       	brcs	.+18     	; 0x468 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	39 f4       	brne	.+14     	; 0x46a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 45c:	20 91 e8 00 	lds	r18, 0x00E8
 460:	2e 77       	andi	r18, 0x7E	; 126
 462:	20 93 e8 00 	sts	0x00E8, r18
 466:	01 c0       	rjmp	.+2      	; 0x46a <Endpoint_Write_Control_PStream_LE+0x22>
 468:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 46a:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 46c:	61 15       	cp	r22, r1
 46e:	71 05       	cpc	r23, r1
 470:	d1 f1       	breq	.+116    	; 0x4e6 <Endpoint_Write_Control_PStream_LE+0x9e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 472:	3e b3       	in	r19, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 474:	33 23       	and	r19, r19
 476:	09 f4       	brne	.+2      	; 0x47a <Endpoint_Write_Control_PStream_LE+0x32>
 478:	43 c0       	rjmp	.+134    	; 0x500 <__stack+0x1>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 47a:	35 30       	cpi	r19, 0x05	; 5
 47c:	09 f4       	brne	.+2      	; 0x480 <Endpoint_Write_Control_PStream_LE+0x38>
 47e:	42 c0       	rjmp	.+132    	; 0x504 <__stack+0x5>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 480:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 484:	33 fd       	sbrc	r19, 3
 486:	40 c0       	rjmp	.+128    	; 0x508 <__stack+0x9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 488:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 48c:	32 ff       	sbrs	r19, 2
 48e:	06 c0       	rjmp	.+12     	; 0x49c <Endpoint_Write_Control_PStream_LE+0x54>
 490:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 494:	82 ff       	sbrs	r24, 2
 496:	2a c0       	rjmp	.+84     	; 0x4ec <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 49c:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 4a0:	30 ff       	sbrs	r19, 0
 4a2:	e4 cf       	rjmp	.-56     	; 0x46c <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 4a4:	20 91 f2 00 	lds	r18, 0x00F2
 4a8:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4aa:	fc 01       	movw	r30, r24
 4ac:	28 1b       	sub	r18, r24
 4ae:	39 0b       	sbc	r19, r25
 4b0:	c9 01       	movw	r24, r18
 4b2:	8e 0f       	add	r24, r30
 4b4:	9f 1f       	adc	r25, r31
 4b6:	61 15       	cp	r22, r1
 4b8:	71 05       	cpc	r23, r1
 4ba:	51 f0       	breq	.+20     	; 0x4d0 <Endpoint_Write_Control_PStream_LE+0x88>
 4bc:	88 30       	cpi	r24, 0x08	; 8
 4be:	91 05       	cpc	r25, r1
 4c0:	38 f4       	brcc	.+14     	; 0x4d0 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4c2:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4c4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4c8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4ca:	61 50       	subi	r22, 0x01	; 1
 4cc:	71 09       	sbc	r23, r1
 4ce:	f0 cf       	rjmp	.-32     	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x68>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	08 97       	sbiw	r24, 0x08	; 8
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0x90>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4d8:	80 91 e8 00 	lds	r24, 0x00E8
 4dc:	8e 77       	andi	r24, 0x7E	; 126
 4de:	80 93 e8 00 	sts	0x00E8, r24
 4e2:	cf 01       	movw	r24, r30
 4e4:	c3 cf       	rjmp	.-122    	; 0x46c <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4e6:	21 11       	cpse	r18, r1
 4e8:	c4 cf       	rjmp	.-120    	; 0x472 <Endpoint_Write_Control_PStream_LE+0x2a>
 4ea:	d2 cf       	rjmp	.-92     	; 0x490 <Endpoint_Write_Control_PStream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4ec:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4ee:	88 23       	and	r24, r24
 4f0:	39 f0       	breq	.+14     	; 0x500 <__stack+0x1>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4f2:	85 30       	cpi	r24, 0x05	; 5
 4f4:	39 f0       	breq	.+14     	; 0x504 <__stack+0x5>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4fa:	83 ff       	sbrs	r24, 3
 4fc:	c9 cf       	rjmp	.-110    	; 0x490 <Endpoint_Write_Control_PStream_LE+0x48>
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <__stack+0x9>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 508:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 50a:	08 95       	ret

0000050c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 50c:	98 2f       	mov	r25, r24
 50e:	95 30       	cpi	r25, 0x05	; 5
 510:	58 f5       	brcc	.+86     	; 0x568 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 512:	90 93 e9 00 	sts	0x00E9, r25
 516:	98 17       	cp	r25, r24
 518:	39 f0       	breq	.+14     	; 0x528 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 51a:	70 91 ec 00 	lds	r23, 0x00EC
 51e:	20 91 ed 00 	lds	r18, 0x00ED
 522:	50 91 f0 00 	lds	r21, 0x00F0
 526:	03 c0       	rjmp	.+6      	; 0x52e <Endpoint_ConfigureEndpoint_Prv+0x22>
 528:	24 2f       	mov	r18, r20
 52a:	76 2f       	mov	r23, r22
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	21 ff       	sbrs	r18, 1
 530:	19 c0       	rjmp	.+50     	; 0x564 <Endpoint_ConfigureEndpoint_Prv+0x58>
 532:	30 91 eb 00 	lds	r19, 0x00EB
 536:	3e 7f       	andi	r19, 0xFE	; 254
 538:	30 93 eb 00 	sts	0x00EB, r19
 53c:	30 91 ed 00 	lds	r19, 0x00ED
 540:	3d 7f       	andi	r19, 0xFD	; 253
 542:	30 93 ed 00 	sts	0x00ED, r19
 546:	30 91 eb 00 	lds	r19, 0x00EB
 54a:	31 60       	ori	r19, 0x01	; 1
 54c:	30 93 eb 00 	sts	0x00EB, r19
 550:	70 93 ec 00 	sts	0x00EC, r23
 554:	20 93 ed 00 	sts	0x00ED, r18
 558:	50 93 f0 00 	sts	0x00F0, r21
 55c:	20 91 ee 00 	lds	r18, 0x00EE
 560:	27 ff       	sbrs	r18, 7
 562:	07 c0       	rjmp	.+14     	; 0x572 <Endpoint_ConfigureEndpoint_Prv+0x66>
 564:	9f 5f       	subi	r25, 0xFF	; 255
 566:	d3 cf       	rjmp	.-90     	; 0x50e <Endpoint_ConfigureEndpoint_Prv+0x2>
 568:	8f 70       	andi	r24, 0x0F	; 15
 56a:	80 93 e9 00 	sts	0x00E9, r24
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	08 95       	ret
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	08 95       	ret

00000576 <Endpoint_ConfigureEndpointTable>:
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	06 2f       	mov	r16, r22
 580:	ec 01       	movw	r28, r24
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	10 17       	cp	r17, r16
 586:	69 f1       	breq	.+90     	; 0x5e2 <Endpoint_ConfigureEndpointTable+0x6c>
 588:	98 81       	ld	r25, Y
 58a:	99 23       	and	r25, r25
 58c:	39 f1       	breq	.+78     	; 0x5dc <Endpoint_ConfigureEndpointTable+0x66>
 58e:	2c 81       	ldd	r18, Y+4	; 0x04
 590:	e9 81       	ldd	r30, Y+1	; 0x01
 592:	fa 81       	ldd	r31, Y+2	; 0x02
 594:	6b 81       	ldd	r22, Y+3	; 0x03
 596:	89 2f       	mov	r24, r25
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	85 30       	cpi	r24, 0x05	; 5
 59c:	10 f0       	brcs	.+4      	; 0x5a2 <Endpoint_ConfigureEndpointTable+0x2c>
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	21 c0       	rjmp	.+66     	; 0x5e4 <Endpoint_ConfigureEndpointTable+0x6e>
 5a2:	22 30       	cpi	r18, 0x02	; 2
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <Endpoint_ConfigureEndpointTable+0x34>
 5a6:	56 e0       	ldi	r21, 0x06	; 6
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <Endpoint_ConfigureEndpointTable+0x36>
 5aa:	52 e0       	ldi	r21, 0x02	; 2
 5ac:	28 e0       	ldi	r18, 0x08	; 8
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	2e 17       	cp	r18, r30
 5b4:	3f 07       	cpc	r19, r31
 5b6:	20 f4       	brcc	.+8      	; 0x5c0 <Endpoint_ConfigureEndpointTable+0x4a>
 5b8:	4f 5f       	subi	r20, 0xFF	; 255
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	f9 cf       	rjmp	.-14     	; 0x5b2 <Endpoint_ConfigureEndpointTable+0x3c>
 5c0:	42 95       	swap	r20
 5c2:	40 7f       	andi	r20, 0xF0	; 240
 5c4:	45 2b       	or	r20, r21
 5c6:	99 1f       	adc	r25, r25
 5c8:	99 27       	eor	r25, r25
 5ca:	99 1f       	adc	r25, r25
 5cc:	62 95       	swap	r22
 5ce:	66 0f       	add	r22, r22
 5d0:	66 0f       	add	r22, r22
 5d2:	60 7c       	andi	r22, 0xC0	; 192
 5d4:	69 2b       	or	r22, r25
 5d6:	9a df       	rcall	.-204    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 5d8:	88 23       	and	r24, r24
 5da:	09 f3       	breq	.-62     	; 0x59e <Endpoint_ConfigureEndpointTable+0x28>
 5dc:	1f 5f       	subi	r17, 0xFF	; 255
 5de:	25 96       	adiw	r28, 0x05	; 5
 5e0:	d1 cf       	rjmp	.-94     	; 0x584 <Endpoint_ConfigureEndpointTable+0xe>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 5ee:	80 91 16 01 	lds	r24, 0x0116
 5f2:	87 fd       	sbrc	r24, 7
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5f6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5fa:	80 ff       	sbrs	r24, 0
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <Endpoint_ClearStatusStage+0x2a>
 5fe:	10 c0       	rjmp	.+32     	; 0x620 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 600:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 604:	82 fd       	sbrc	r24, 2
 606:	04 c0       	rjmp	.+8      	; 0x610 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 608:	8e b3       	in	r24, 0x1e	; 30
 60a:	81 11       	cpse	r24, r1
 60c:	f9 cf       	rjmp	.-14     	; 0x600 <Endpoint_ClearStatusStage+0x12>
 60e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 610:	80 91 e8 00 	lds	r24, 0x00E8
 614:	8b 77       	andi	r24, 0x7B	; 123
 616:	07 c0       	rjmp	.+14     	; 0x626 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 618:	8e b3       	in	r24, 0x1e	; 30
 61a:	81 11       	cpse	r24, r1
 61c:	ec cf       	rjmp	.-40     	; 0x5f6 <Endpoint_ClearStatusStage+0x8>
 61e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 620:	80 91 e8 00 	lds	r24, 0x00E8
 624:	8e 77       	andi	r24, 0x7E	; 126
 626:	80 93 e8 00 	sts	0x00E8, r24
 62a:	08 95       	ret

0000062c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 62c:	80 91 e4 00 	lds	r24, 0x00E4
 630:	90 91 e5 00 	lds	r25, 0x00E5
 634:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 636:	20 91 ec 00 	lds	r18, 0x00EC
 63a:	20 ff       	sbrs	r18, 0
 63c:	20 c0       	rjmp	.+64     	; 0x67e <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 63e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 642:	20 fd       	sbrc	r18, 0
 644:	20 c0       	rjmp	.+64     	; 0x686 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 646:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 648:	22 23       	and	r18, r18
 64a:	89 f0       	breq	.+34     	; 0x66e <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 64c:	25 30       	cpi	r18, 0x05	; 5
 64e:	89 f0       	breq	.+34     	; 0x672 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 650:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 654:	25 fd       	sbrc	r18, 5
 656:	0f c0       	rjmp	.+30     	; 0x676 <Endpoint_WaitUntilReady+0x4a>
 658:	20 91 e4 00 	lds	r18, 0x00E4
 65c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 660:	28 17       	cp	r18, r24
 662:	39 07       	cpc	r19, r25
 664:	41 f3       	breq	.-48     	; 0x636 <Endpoint_WaitUntilReady+0xa>
 666:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 668:	41 f0       	breq	.+16     	; 0x67a <Endpoint_WaitUntilReady+0x4e>
 66a:	c9 01       	movw	r24, r18
 66c:	e4 cf       	rjmp	.-56     	; 0x636 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 67e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 682:	22 ff       	sbrs	r18, 2
 684:	e0 cf       	rjmp	.-64     	; 0x646 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret

0000068a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 68a:	40 d0       	rcall	.+128    	; 0x70c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 68c:	42 d0       	rcall	.+132    	; 0x712 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 68e:	80 91 d8 00 	lds	r24, 0x00D8
 692:	8f 77       	andi	r24, 0x7F	; 127
 694:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 698:	80 91 d8 00 	lds	r24, 0x00D8
 69c:	80 68       	ori	r24, 0x80	; 128
 69e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6a2:	80 91 d8 00 	lds	r24, 0x00D8
 6a6:	8f 7d       	andi	r24, 0xDF	; 223
 6a8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6ac:	84 e0       	ldi	r24, 0x04	; 4
 6ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6b4:	09 b4       	in	r0, 0x29	; 41
 6b6:	00 fe       	sbrs	r0, 0
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6ba:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 6bc:	10 92 12 01 	sts	0x0112, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6c0:	10 92 14 01 	sts	0x0114, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6c4:	10 92 13 01 	sts	0x0113, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 6c8:	42 e0       	ldi	r20, 0x02	; 2
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	1e df       	rcall	.-452    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6d0:	80 91 e1 00 	lds	r24, 0x00E1
 6d4:	8e 7f       	andi	r24, 0xFE	; 254
 6d6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6da:	80 91 e2 00 	lds	r24, 0x00E2
 6de:	81 60       	ori	r24, 0x01	; 1
 6e0:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6e4:	80 91 e2 00 	lds	r24, 0x00E2
 6e8:	88 60       	ori	r24, 0x08	; 8
 6ea:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6ee:	80 91 e0 00 	lds	r24, 0x00E0
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
 6f4:	80 93 e0 00 	sts	0x00E0, r24
 6f8:	08 95       	ret

000006fa <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 6fa:	e3 e6       	ldi	r30, 0x63	; 99
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	8e 7f       	andi	r24, 0xFE	; 254
 702:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	80 93 15 01 	sts	0x0115, r24

	USB_ResetInterface();
 70a:	bf cf       	rjmp	.-130    	; 0x68a <USB_ResetInterface>

0000070c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 70c:	10 92 e2 00 	sts	0x00E2, r1
 710:	08 95       	ret

00000712 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 712:	10 92 e1 00 	sts	0x00E1, r1
 716:	08 95       	ret

00000718 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	5f 93       	push	r21
 72a:	6f 93       	push	r22
 72c:	7f 93       	push	r23
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 73a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 73e:	82 ff       	sbrs	r24, 2
 740:	0a c0       	rjmp	.+20     	; 0x756 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 742:	80 91 e2 00 	lds	r24, 0x00E2
 746:	82 ff       	sbrs	r24, 2
 748:	06 c0       	rjmp	.+12     	; 0x756 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 74a:	80 91 e1 00 	lds	r24, 0x00E1
 74e:	8b 7f       	andi	r24, 0xFB	; 251
 750:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 754:	2e dd       	rcall	.-1444   	; 0x1b2 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 756:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 75a:	80 ff       	sbrs	r24, 0
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 75e:	80 91 e2 00 	lds	r24, 0x00E2
 762:	80 ff       	sbrs	r24, 0
 764:	12 c0       	rjmp	.+36     	; 0x78a <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 766:	80 91 e2 00 	lds	r24, 0x00E2
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 770:	80 91 e2 00 	lds	r24, 0x00E2
 774:	80 61       	ori	r24, 0x10	; 16
 776:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 77a:	80 91 d8 00 	lds	r24, 0x00D8
 77e:	80 62       	ori	r24, 0x20	; 32
 780:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 784:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 786:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 788:	07 dd       	rcall	.-1522   	; 0x198 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 78a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 78e:	84 ff       	sbrs	r24, 4
 790:	2e c0       	rjmp	.+92     	; 0x7ee <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 792:	80 91 e2 00 	lds	r24, 0x00E2
 796:	84 ff       	sbrs	r24, 4
 798:	2a c0       	rjmp	.+84     	; 0x7ee <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7a2:	09 b4       	in	r0, 0x29	; 41
 7a4:	00 fe       	sbrs	r0, 0
 7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7a8:	80 91 d8 00 	lds	r24, 0x00D8
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7b2:	80 91 e1 00 	lds	r24, 0x00E1
 7b6:	8f 7e       	andi	r24, 0xEF	; 239
 7b8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7bc:	80 91 e2 00 	lds	r24, 0x00E2
 7c0:	8f 7e       	andi	r24, 0xEF	; 239
 7c2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7c6:	80 91 e2 00 	lds	r24, 0x00E2
 7ca:	81 60       	ori	r24, 0x01	; 1
 7cc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7d0:	80 91 12 01 	lds	r24, 0x0112
 7d4:	88 23       	and	r24, r24
 7d6:	11 f0       	breq	.+4      	; 0x7dc <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7dc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 7e0:	87 ff       	sbrs	r24, 7
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__vector_11+0xd0>
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__vector_11+0xd2>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 7ec:	d4 dc       	rcall	.-1624   	; 0x196 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7ee:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7f2:	83 ff       	sbrs	r24, 3
 7f4:	21 c0       	rjmp	.+66     	; 0x838 <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7f6:	80 91 e2 00 	lds	r24, 0x00E2
 7fa:	83 ff       	sbrs	r24, 3
 7fc:	1d c0       	rjmp	.+58     	; 0x838 <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7fe:	80 91 e1 00 	lds	r24, 0x00E1
 802:	87 7f       	andi	r24, 0xF7	; 247
 804:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 80c:	10 92 12 01 	sts	0x0112, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 810:	80 91 e1 00 	lds	r24, 0x00E1
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 81a:	80 91 e2 00 	lds	r24, 0x00E2
 81e:	8e 7f       	andi	r24, 0xFE	; 254
 820:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 824:	80 91 e2 00 	lds	r24, 0x00E2
 828:	80 61       	ori	r24, 0x10	; 16
 82a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 82e:	42 e0       	ldi	r20, 0x02	; 2
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	6b de       	rcall	.-810    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 836:	60 d1       	rcall	.+704    	; 0xaf8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 838:	ff 91       	pop	r31
 83a:	ef 91       	pop	r30
 83c:	bf 91       	pop	r27
 83e:	af 91       	pop	r26
 840:	9f 91       	pop	r25
 842:	8f 91       	pop	r24
 844:	7f 91       	pop	r23
 846:	6f 91       	pop	r22
 848:	5f 91       	pop	r21
 84a:	4f 91       	pop	r20
 84c:	3f 91       	pop	r19
 84e:	2f 91       	pop	r18
 850:	0f 90       	pop	r0
 852:	0f be       	out	0x3f, r0	; 63
 854:	0f 90       	pop	r0
 856:	1f 90       	pop	r1
 858:	18 95       	reti

0000085a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	aa 97       	sbiw	r28, 0x2a	; 42
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	de bf       	out	0x3e, r29	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	e6 e1       	ldi	r30, 0x16	; 22
 872:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 874:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 878:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 87a:	21 e0       	ldi	r18, 0x01	; 1
 87c:	ee 31       	cpi	r30, 0x1E	; 30
 87e:	f2 07       	cpc	r31, r18
 880:	c9 f7       	brne	.-14     	; 0x874 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 882:	94 dc       	rcall	.-1752   	; 0x1ac <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 884:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 888:	83 ff       	sbrs	r24, 3
 88a:	1e c1       	rjmp	.+572    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 88c:	90 91 16 01 	lds	r25, 0x0116

		switch (USB_ControlRequest.bRequest)
 890:	80 91 17 01 	lds	r24, 0x0117
 894:	85 30       	cpi	r24, 0x05	; 5
 896:	09 f4       	brne	.+2      	; 0x89a <USB_Device_ProcessControlRequest+0x40>
 898:	77 c0       	rjmp	.+238    	; 0x988 <USB_Device_ProcessControlRequest+0x12e>
 89a:	30 f4       	brcc	.+12     	; 0x8a8 <USB_Device_ProcessControlRequest+0x4e>
 89c:	81 30       	cpi	r24, 0x01	; 1
 89e:	81 f1       	breq	.+96     	; 0x900 <USB_Device_ProcessControlRequest+0xa6>
 8a0:	68 f0       	brcs	.+26     	; 0x8bc <USB_Device_ProcessControlRequest+0x62>
 8a2:	83 30       	cpi	r24, 0x03	; 3
 8a4:	69 f1       	breq	.+90     	; 0x900 <USB_Device_ProcessControlRequest+0xa6>
 8a6:	10 c1       	rjmp	.+544    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
 8a8:	88 30       	cpi	r24, 0x08	; 8
 8aa:	09 f4       	brne	.+2      	; 0x8ae <USB_Device_ProcessControlRequest+0x54>
 8ac:	e0 c0       	rjmp	.+448    	; 0xa6e <USB_Device_ProcessControlRequest+0x214>
 8ae:	89 30       	cpi	r24, 0x09	; 9
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0x5a>
 8b2:	ef c0       	rjmp	.+478    	; 0xa92 <USB_Device_ProcessControlRequest+0x238>
 8b4:	86 30       	cpi	r24, 0x06	; 6
 8b6:	09 f0       	breq	.+2      	; 0x8ba <USB_Device_ProcessControlRequest+0x60>
 8b8:	07 c1       	rjmp	.+526    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
 8ba:	87 c0       	rjmp	.+270    	; 0x9ca <USB_Device_ProcessControlRequest+0x170>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8bc:	90 38       	cpi	r25, 0x80	; 128
 8be:	81 f0       	breq	.+32     	; 0x8e0 <USB_Device_ProcessControlRequest+0x86>
 8c0:	92 38       	cpi	r25, 0x82	; 130
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <USB_Device_ProcessControlRequest+0x6c>
 8c4:	01 c1       	rjmp	.+514    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8c6:	80 91 1a 01 	lds	r24, 0x011A
 8ca:	8f 70       	andi	r24, 0x0F	; 15
 8cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8d0:	80 91 eb 00 	lds	r24, 0x00EB
 8d4:	85 fb       	bst	r24, 5
 8d6:	88 27       	eor	r24, r24
 8d8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8da:	10 92 e9 00 	sts	0x00E9, r1
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 8e0:	80 91 13 01 	lds	r24, 0x0113
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 8e4:	90 91 14 01 	lds	r25, 0x0114
 8e8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 8ea:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ec:	90 91 e8 00 	lds	r25, 0x00E8
 8f0:	97 7f       	andi	r25, 0xF7	; 247
 8f2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 8f6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 8fa:	10 92 f1 00 	sts	0x00F1, r1
 8fe:	c2 c0       	rjmp	.+388    	; 0xa84 <USB_Device_ProcessControlRequest+0x22a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 900:	29 2f       	mov	r18, r25
 902:	2d 7f       	andi	r18, 0xFD	; 253
 904:	09 f0       	breq	.+2      	; 0x908 <USB_Device_ProcessControlRequest+0xae>
 906:	e0 c0       	rjmp	.+448    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 908:	99 23       	and	r25, r25
 90a:	19 f0       	breq	.+6      	; 0x912 <USB_Device_ProcessControlRequest+0xb8>
 90c:	92 30       	cpi	r25, 0x02	; 2
 90e:	61 f0       	breq	.+24     	; 0x928 <USB_Device_ProcessControlRequest+0xce>
 910:	db c0       	rjmp	.+438    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 912:	90 91 18 01 	lds	r25, 0x0118
 916:	91 30       	cpi	r25, 0x01	; 1
 918:	09 f0       	breq	.+2      	; 0x91c <USB_Device_ProcessControlRequest+0xc2>
 91a:	d6 c0       	rjmp	.+428    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 91c:	83 30       	cpi	r24, 0x03	; 3
 91e:	09 f0       	breq	.+2      	; 0x922 <USB_Device_ProcessControlRequest+0xc8>
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	90 93 14 01 	sts	0x0114, r25
 926:	2a c0       	rjmp	.+84     	; 0x97c <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 928:	90 91 18 01 	lds	r25, 0x0118
 92c:	91 11       	cpse	r25, r1
 92e:	26 c0       	rjmp	.+76     	; 0x97c <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 930:	20 91 1a 01 	lds	r18, 0x011A
 934:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 936:	09 f4       	brne	.+2      	; 0x93a <USB_Device_ProcessControlRequest+0xe0>
 938:	c7 c0       	rjmp	.+398    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 93a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 93e:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 942:	90 ff       	sbrs	r25, 0
 944:	1b c0       	rjmp	.+54     	; 0x97c <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 946:	83 30       	cpi	r24, 0x03	; 3
 948:	21 f4       	brne	.+8      	; 0x952 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 94a:	80 91 eb 00 	lds	r24, 0x00EB
 94e:	80 62       	ori	r24, 0x20	; 32
 950:	13 c0       	rjmp	.+38     	; 0x978 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 952:	80 91 eb 00 	lds	r24, 0x00EB
 956:	80 61       	ori	r24, 0x10	; 16
 958:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	02 2e       	mov	r0, r18
 962:	01 c0       	rjmp	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x10c>
 964:	88 0f       	add	r24, r24
 966:	0a 94       	dec	r0
 968:	ea f7       	brpl	.-6      	; 0x964 <USB_Device_ProcessControlRequest+0x10a>
 96a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 96e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 972:	80 91 eb 00 	lds	r24, 0x00EB
 976:	88 60       	ori	r24, 0x08	; 8
 978:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 97c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 980:	80 91 e8 00 	lds	r24, 0x00E8
 984:	87 7f       	andi	r24, 0xF7	; 247
 986:	81 c0       	rjmp	.+258    	; 0xa8a <USB_Device_ProcessControlRequest+0x230>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 988:	91 11       	cpse	r25, r1
 98a:	9e c0       	rjmp	.+316    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 98c:	10 91 18 01 	lds	r17, 0x0118
 990:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 992:	80 91 e3 00 	lds	r24, 0x00E3
 996:	80 78       	andi	r24, 0x80	; 128
 998:	81 2b       	or	r24, r17
 99a:	80 93 e3 00 	sts	0x00E3, r24
 99e:	80 91 e8 00 	lds	r24, 0x00E8
 9a2:	87 7f       	andi	r24, 0xF7	; 247
 9a4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9a8:	22 de       	rcall	.-956    	; 0x5ee <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9aa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 9ae:	80 ff       	sbrs	r24, 0
 9b0:	fc cf       	rjmp	.-8      	; 0x9aa <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 9b2:	80 91 e3 00 	lds	r24, 0x00E3
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9bc:	11 23       	and	r17, r17
 9be:	11 f0       	breq	.+4      	; 0x9c4 <USB_Device_ProcessControlRequest+0x16a>
 9c0:	83 e0       	ldi	r24, 0x03	; 3
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0x16c>
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	8e bb       	out	0x1e, r24	; 30
 9c8:	7f c0       	rjmp	.+254    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ca:	90 58       	subi	r25, 0x80	; 128
 9cc:	92 30       	cpi	r25, 0x02	; 2
 9ce:	08 f0       	brcs	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x178>
 9d0:	7b c0       	rjmp	.+246    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 9d2:	80 91 18 01 	lds	r24, 0x0118
 9d6:	90 91 19 01 	lds	r25, 0x0119
 9da:	8c 3d       	cpi	r24, 0xDC	; 220
 9dc:	23 e0       	ldi	r18, 0x03	; 3
 9de:	92 07       	cpc	r25, r18
 9e0:	71 f5       	brne	.+92     	; 0xa3e <USB_Device_ProcessControlRequest+0x1e4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 9e2:	83 e0       	ldi	r24, 0x03	; 3
 9e4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 9e6:	8a e2       	ldi	r24, 0x2A	; 42
 9e8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9ea:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9ec:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 9ee:	de 01       	movw	r26, r28
 9f0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9f2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 9f4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9f6:	51 e2       	ldi	r21, 0x21	; 33
 9f8:	e3 2f       	mov	r30, r19
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	50 93 57 00 	sts	0x0057, r21
 a00:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a02:	20 ff       	sbrs	r18, 0
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <USB_Device_ProcessControlRequest+0x1b2>
					{
						SerialByte >>= 4;
 a06:	e2 95       	swap	r30
 a08:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a0a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a0c:	ef 70       	andi	r30, 0x0F	; 15
 a0e:	8e 2f       	mov	r24, r30
 a10:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a12:	ea 30       	cpi	r30, 0x0A	; 10
 a14:	10 f0       	brcs	.+4      	; 0xa1a <USB_Device_ProcessControlRequest+0x1c0>
 a16:	c7 96       	adiw	r24, 0x37	; 55
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x1c2>
 a1a:	c0 96       	adiw	r24, 0x30	; 48
 a1c:	8d 93       	st	X+, r24
 a1e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a20:	2f 5f       	subi	r18, 0xFF	; 255
 a22:	24 31       	cpi	r18, 0x14	; 20
 a24:	49 f7       	brne	.-46     	; 0x9f8 <USB_Device_ProcessControlRequest+0x19e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a26:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a28:	80 91 e8 00 	lds	r24, 0x00E8
 a2c:	87 7f       	andi	r24, 0xF7	; 247
 a2e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a32:	6a e2       	ldi	r22, 0x2A	; 42
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	ce 01       	movw	r24, r28
 a38:	01 96       	adiw	r24, 0x01	; 1
 a3a:	6b dc       	rcall	.-1834   	; 0x312 <Endpoint_Write_Control_Stream_LE>
 a3c:	12 c0       	rjmp	.+36     	; 0xa62 <USB_Device_ProcessControlRequest+0x208>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a3e:	ae 01       	movw	r20, r28
 a40:	4f 5f       	subi	r20, 0xFF	; 255
 a42:	5f 4f       	sbci	r21, 0xFF	; 255
 a44:	60 91 1a 01 	lds	r22, 0x011A
 a48:	d9 db       	rcall	.-2126   	; 0x1fc <CALLBACK_USB_GetDescriptor>
 a4a:	00 97       	sbiw	r24, 0x00	; 0
 a4c:	09 f4       	brne	.+2      	; 0xa50 <USB_Device_ProcessControlRequest+0x1f6>
 a4e:	3c c0       	rjmp	.+120    	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
 a50:	20 91 e8 00 	lds	r18, 0x00E8
 a54:	27 7f       	andi	r18, 0xF7	; 247
 a56:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a5a:	bc 01       	movw	r22, r24
 a5c:	89 81       	ldd	r24, Y+1	; 0x01
 a5e:	9a 81       	ldd	r25, Y+2	; 0x02
 a60:	f3 dc       	rcall	.-1562   	; 0x448 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a62:	80 91 e8 00 	lds	r24, 0x00E8
 a66:	8b 77       	andi	r24, 0x7B	; 123
 a68:	80 93 e8 00 	sts	0x00E8, r24
 a6c:	2d c0       	rjmp	.+90     	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a6e:	90 38       	cpi	r25, 0x80	; 128
 a70:	59 f5       	brne	.+86     	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a72:	80 91 e8 00 	lds	r24, 0x00E8
 a76:	87 7f       	andi	r24, 0xF7	; 247
 a78:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 a7c:	80 91 12 01 	lds	r24, 0x0112
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a80:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a84:	80 91 e8 00 	lds	r24, 0x00E8
 a88:	8e 77       	andi	r24, 0x7E	; 126
 a8a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a8e:	af dd       	rcall	.-1186   	; 0x5ee <Endpoint_ClearStatusStage>
 a90:	1b c0       	rjmp	.+54     	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a92:	91 11       	cpse	r25, r1
 a94:	19 c0       	rjmp	.+50     	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a96:	90 91 18 01 	lds	r25, 0x0118
 a9a:	92 30       	cpi	r25, 0x02	; 2
 a9c:	a8 f4       	brcc	.+42     	; 0xac8 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a9e:	80 91 e8 00 	lds	r24, 0x00E8
 aa2:	87 7f       	andi	r24, 0xF7	; 247
 aa4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 aa8:	90 93 12 01 	sts	0x0112, r25

	Endpoint_ClearStatusStage();
 aac:	a0 dd       	rcall	.-1216   	; 0x5ee <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 aae:	80 91 12 01 	lds	r24, 0x0112
 ab2:	81 11       	cpse	r24, r1
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <USB_Device_ProcessControlRequest+0x264>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ab6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 aba:	87 ff       	sbrs	r24, 7
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <USB_Device_ProcessControlRequest+0x268>
 abe:	84 e0       	ldi	r24, 0x04	; 4
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0x26a>
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 ac6:	69 db       	rcall	.-2350   	; 0x19a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ac8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 acc:	83 ff       	sbrs	r24, 3
 ace:	0a c0       	rjmp	.+20     	; 0xae4 <USB_Device_ProcessControlRequest+0x28a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad0:	80 91 e8 00 	lds	r24, 0x00E8
 ad4:	87 7f       	andi	r24, 0xF7	; 247
 ad6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ada:	80 91 eb 00 	lds	r24, 0x00EB
 ade:	80 62       	ori	r24, 0x20	; 32
 ae0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ae4:	aa 96       	adiw	r28, 0x2a	; 42
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	f8 94       	cli
 aea:	de bf       	out	0x3e, r29	; 62
 aec:	0f be       	out	0x3f, r0	; 63
 aee:	cd bf       	out	0x3d, r28	; 61
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	1f 91       	pop	r17
 af6:	08 95       	ret

00000af8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 af8:	08 95       	ret

00000afa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 afa:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 afc:	8e b3       	in	r24, 0x1e	; 30
 afe:	88 23       	and	r24, r24
 b00:	a9 f0       	breq	.+42     	; 0xb2c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b02:	80 91 e9 00 	lds	r24, 0x00E9
 b06:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b08:	90 91 ec 00 	lds	r25, 0x00EC
 b0c:	90 ff       	sbrs	r25, 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <USB_USBTask+0x1a>
 b10:	90 e8       	ldi	r25, 0x80	; 128
 b12:	01 c0       	rjmp	.+2      	; 0xb16 <USB_USBTask+0x1c>
 b14:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b16:	c9 2f       	mov	r28, r25
 b18:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b1a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b1e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 b22:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 b24:	9a de       	rcall	.-716    	; 0x85a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b26:	cf 70       	andi	r28, 0x0F	; 15
 b28:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

00000b30 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b30:	6f 92       	push	r6
 b32:	7f 92       	push	r7
 b34:	8f 92       	push	r8
 b36:	9f 92       	push	r9
 b38:	af 92       	push	r10
 b3a:	bf 92       	push	r11
 b3c:	cf 92       	push	r12
 b3e:	df 92       	push	r13
 b40:	ef 92       	push	r14
 b42:	ff 92       	push	r15
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <HID_Device_ProcessControlRequest+0x1e>
 b4e:	1f 92       	push	r1
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
 b54:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 b56:	ad b6       	in	r10, 0x3d	; 61
 b58:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b5a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 b5e:	83 ff       	sbrs	r24, 3
 b60:	02 c1       	rjmp	.+516    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b62:	f7 01       	movw	r30, r14
 b64:	80 81       	ld	r24, Z
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	20 91 1a 01 	lds	r18, 0x011A
 b6c:	30 91 1b 01 	lds	r19, 0x011B
 b70:	28 17       	cp	r18, r24
 b72:	39 07       	cpc	r19, r25
 b74:	09 f0       	breq	.+2      	; 0xb78 <HID_Device_ProcessControlRequest+0x48>
 b76:	f7 c0       	rjmp	.+494    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
 b78:	80 91 17 01 	lds	r24, 0x0117
 b7c:	83 30       	cpi	r24, 0x03	; 3
 b7e:	09 f4       	brne	.+2      	; 0xb82 <HID_Device_ProcessControlRequest+0x52>
 b80:	99 c0       	rjmp	.+306    	; 0xcb4 <HID_Device_ProcessControlRequest+0x184>
 b82:	30 f4       	brcc	.+12     	; 0xb90 <HID_Device_ProcessControlRequest+0x60>
 b84:	81 30       	cpi	r24, 0x01	; 1
 b86:	71 f0       	breq	.+28     	; 0xba4 <HID_Device_ProcessControlRequest+0x74>
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	09 f4       	brne	.+2      	; 0xb8e <HID_Device_ProcessControlRequest+0x5e>
 b8c:	d0 c0       	rjmp	.+416    	; 0xd2e <HID_Device_ProcessControlRequest+0x1fe>
 b8e:	eb c0       	rjmp	.+470    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 b90:	8a 30       	cpi	r24, 0x0A	; 10
 b92:	09 f4       	brne	.+2      	; 0xb96 <HID_Device_ProcessControlRequest+0x66>
 b94:	b4 c0       	rjmp	.+360    	; 0xcfe <HID_Device_ProcessControlRequest+0x1ce>
 b96:	8b 30       	cpi	r24, 0x0B	; 11
 b98:	09 f4       	brne	.+2      	; 0xb9c <HID_Device_ProcessControlRequest+0x6c>
 b9a:	9d c0       	rjmp	.+314    	; 0xcd6 <HID_Device_ProcessControlRequest+0x1a6>
 b9c:	89 30       	cpi	r24, 0x09	; 9
 b9e:	09 f0       	breq	.+2      	; 0xba2 <HID_Device_ProcessControlRequest+0x72>
 ba0:	e2 c0       	rjmp	.+452    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 ba2:	4b c0       	rjmp	.+150    	; 0xc3a <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 ba4:	80 91 16 01 	lds	r24, 0x0116
 ba8:	81 3a       	cpi	r24, 0xA1	; 161
 baa:	09 f0       	breq	.+2      	; 0xbae <HID_Device_ProcessControlRequest+0x7e>
 bac:	dc c0       	rjmp	.+440    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 bae:	8d b6       	in	r8, 0x3d	; 61
 bb0:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
 bb2:	1a 82       	std	Y+2, r1	; 0x02
 bb4:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 bb6:	80 91 18 01 	lds	r24, 0x0118
 bba:	10 91 19 01 	lds	r17, 0x0119
 bbe:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 bc0:	f7 01       	movw	r30, r14
 bc2:	40 85       	ldd	r20, Z+8	; 0x08
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	8d b7       	in	r24, 0x3d	; 61
 bc8:	9e b7       	in	r25, 0x3e	; 62
 bca:	84 1b       	sub	r24, r20
 bcc:	95 0b       	sbc	r25, r21
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	9e bf       	out	0x3e, r25	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	8d bf       	out	0x3d, r24	; 61
 bd8:	ed b7       	in	r30, 0x3d	; 61
 bda:	fe b7       	in	r31, 0x3e	; 62
 bdc:	31 96       	adiw	r30, 0x01	; 1
 bde:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 be0:	60 e0       	ldi	r22, 0x00	; 0
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	cf 01       	movw	r24, r30
 be6:	bb d1       	rcall	.+886    	; 0xf5e <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 be8:	4f ef       	ldi	r20, 0xFF	; 255
 bea:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 bec:	8e 01       	movw	r16, r28
 bee:	0f 5f       	subi	r16, 0xFF	; 255
 bf0:	1f 4f       	sbci	r17, 0xFF	; 255
 bf2:	96 01       	movw	r18, r12
 bf4:	be 01       	movw	r22, r28
 bf6:	6d 5f       	subi	r22, 0xFD	; 253
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	c7 01       	movw	r24, r14
 bfc:	e6 da       	rcall	.-2612   	; 0x1ca <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 bfe:	f7 01       	movw	r30, r14
 c00:	86 81       	ldd	r24, Z+6	; 0x06
 c02:	97 81       	ldd	r25, Z+7	; 0x07
 c04:	00 97       	sbiw	r24, 0x00	; 0
 c06:	21 f0       	breq	.+8      	; 0xc10 <HID_Device_ProcessControlRequest+0xe0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 c08:	40 85       	ldd	r20, Z+8	; 0x08
 c0a:	50 e0       	ldi	r21, 0x00	; 0
 c0c:	b6 01       	movw	r22, r12
 c0e:	9e d1       	rcall	.+828    	; 0xf4c <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c10:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c14:	80 91 e8 00 	lds	r24, 0x00E8
 c18:	87 7f       	andi	r24, 0xF7	; 247
 c1a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 c1e:	8b 81       	ldd	r24, Y+3	; 0x03
 c20:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c22:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 c26:	69 81       	ldd	r22, Y+1	; 0x01
 c28:	7a 81       	ldd	r23, Y+2	; 0x02
 c2a:	c6 01       	movw	r24, r12
 c2c:	72 db       	rcall	.-2332   	; 0x312 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c2e:	80 91 e8 00 	lds	r24, 0x00E8
 c32:	8b 77       	andi	r24, 0x7B	; 123
 c34:	80 93 e8 00 	sts	0x00E8, r24
 c38:	37 c0       	rjmp	.+110    	; 0xca8 <HID_Device_ProcessControlRequest+0x178>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c3a:	80 91 16 01 	lds	r24, 0x0116
 c3e:	81 32       	cpi	r24, 0x21	; 33
 c40:	09 f0       	breq	.+2      	; 0xc44 <HID_Device_ProcessControlRequest+0x114>
 c42:	91 c0       	rjmp	.+290    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 c44:	8d b6       	in	r8, 0x3d	; 61
 c46:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
 c48:	00 91 1c 01 	lds	r16, 0x011C
 c4c:	10 91 1d 01 	lds	r17, 0x011D
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c50:	70 90 18 01 	lds	r7, 0x0118
 c54:	60 90 19 01 	lds	r6, 0x0119
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c58:	8d b7       	in	r24, 0x3d	; 61
 c5a:	9e b7       	in	r25, 0x3e	; 62
 c5c:	80 1b       	sub	r24, r16
 c5e:	91 0b       	sbc	r25, r17
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	9e bf       	out	0x3e, r25	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	8d bf       	out	0x3d, r24	; 61
 c6a:	ed b7       	in	r30, 0x3d	; 61
 c6c:	fe b7       	in	r31, 0x3e	; 62
 c6e:	31 96       	adiw	r30, 0x01	; 1
 c70:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c72:	80 91 e8 00 	lds	r24, 0x00E8
 c76:	87 7f       	andi	r24, 0xF7	; 247
 c78:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 c7c:	b8 01       	movw	r22, r16
 c7e:	cf 01       	movw	r24, r30
 c80:	a9 db       	rcall	.-2222   	; 0x3d4 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c82:	80 91 e8 00 	lds	r24, 0x00E8
 c86:	8e 77       	andi	r24, 0x7E	; 126
 c88:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 c8c:	21 e0       	ldi	r18, 0x01	; 1
 c8e:	71 10       	cpse	r7, r1
 c90:	01 c0       	rjmp	.+2      	; 0xc94 <HID_Device_ProcessControlRequest+0x164>
 c92:	20 e0       	ldi	r18, 0x00	; 0
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	02 1b       	sub	r16, r18
 c98:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 c9a:	2c 0d       	add	r18, r12
 c9c:	3d 1d       	adc	r19, r13
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c9e:	4f ef       	ldi	r20, 0xFF	; 255
 ca0:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 ca2:	67 2d       	mov	r22, r7
 ca4:	c7 01       	movw	r24, r14
 ca6:	a9 da       	rcall	.-2734   	; 0x1fa <CALLBACK_HID_Device_ProcessHIDReport>
 ca8:	0f b6       	in	r0, 0x3f	; 63
 caa:	f8 94       	cli
 cac:	9e be       	out	0x3e, r9	; 62
 cae:	0f be       	out	0x3f, r0	; 63
 cb0:	8d be       	out	0x3d, r8	; 61
 cb2:	59 c0       	rjmp	.+178    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cb4:	80 91 16 01 	lds	r24, 0x0116
 cb8:	81 3a       	cpi	r24, 0xA1	; 161
 cba:	09 f0       	breq	.+2      	; 0xcbe <HID_Device_ProcessControlRequest+0x18e>
 cbc:	54 c0       	rjmp	.+168    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cbe:	80 91 e8 00 	lds	r24, 0x00E8
 cc2:	87 7f       	andi	r24, 0xF7	; 247
 cc4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cc8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 ccc:	80 ff       	sbrs	r24, 0
 cce:	fc cf       	rjmp	.-8      	; 0xcc8 <HID_Device_ProcessControlRequest+0x198>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 cd0:	f7 01       	movw	r30, r14
 cd2:	81 85       	ldd	r24, Z+9	; 0x09
 cd4:	40 c0       	rjmp	.+128    	; 0xd56 <HID_Device_ProcessControlRequest+0x226>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cd6:	80 91 16 01 	lds	r24, 0x0116
 cda:	81 32       	cpi	r24, 0x21	; 33
 cdc:	09 f0       	breq	.+2      	; 0xce0 <HID_Device_ProcessControlRequest+0x1b0>
 cde:	43 c0       	rjmp	.+134    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ce0:	80 91 e8 00 	lds	r24, 0x00E8
 ce4:	87 7f       	andi	r24, 0xF7	; 247
 ce6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 cea:	81 dc       	rcall	.-1790   	; 0x5ee <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 cec:	90 91 18 01 	lds	r25, 0x0118
 cf0:	81 e0       	ldi	r24, 0x01	; 1
 cf2:	91 11       	cpse	r25, r1
 cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <HID_Device_ProcessControlRequest+0x1c8>
 cf6:	80 e0       	ldi	r24, 0x00	; 0
 cf8:	f7 01       	movw	r30, r14
 cfa:	81 87       	std	Z+9, r24	; 0x09
 cfc:	34 c0       	rjmp	.+104    	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cfe:	80 91 16 01 	lds	r24, 0x0116
 d02:	81 32       	cpi	r24, 0x21	; 33
 d04:	81 f5       	brne	.+96     	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 d06:	80 91 e8 00 	lds	r24, 0x00E8
 d0a:	87 7f       	andi	r24, 0xF7	; 247
 d0c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d10:	6e dc       	rcall	.-1828   	; 0x5ee <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d12:	80 91 18 01 	lds	r24, 0x0118
 d16:	90 91 19 01 	lds	r25, 0x0119
 d1a:	88 27       	eor	r24, r24
 d1c:	36 e0       	ldi	r19, 0x06	; 6
 d1e:	96 95       	lsr	r25
 d20:	87 95       	ror	r24
 d22:	3a 95       	dec	r19
 d24:	e1 f7       	brne	.-8      	; 0xd1e <HID_Device_ProcessControlRequest+0x1ee>
 d26:	f7 01       	movw	r30, r14
 d28:	95 87       	std	Z+13, r25	; 0x0d
 d2a:	84 87       	std	Z+12, r24	; 0x0c
 d2c:	1c c0       	rjmp	.+56     	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d2e:	80 91 16 01 	lds	r24, 0x0116
 d32:	81 3a       	cpi	r24, 0xA1	; 161
 d34:	c1 f4       	brne	.+48     	; 0xd66 <HID_Device_ProcessControlRequest+0x236>
 d36:	80 91 e8 00 	lds	r24, 0x00E8
 d3a:	87 7f       	andi	r24, 0xF7	; 247
 d3c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d40:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 d44:	80 ff       	sbrs	r24, 0
 d46:	fc cf       	rjmp	.-8      	; 0xd40 <HID_Device_ProcessControlRequest+0x210>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 d48:	f7 01       	movw	r30, r14
 d4a:	84 85       	ldd	r24, Z+12	; 0x0c
 d4c:	95 85       	ldd	r25, Z+13	; 0x0d
 d4e:	96 95       	lsr	r25
 d50:	87 95       	ror	r24
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d56:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5a:	80 91 e8 00 	lds	r24, 0x00E8
 d5e:	8e 77       	andi	r24, 0x7E	; 126
 d60:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d64:	44 dc       	rcall	.-1912   	; 0x5ee <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	f8 94       	cli
 d6a:	be be       	out	0x3e, r11	; 62
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	ad be       	out	0x3d, r10	; 61
 d70:	0f 90       	pop	r0
 d72:	0f 90       	pop	r0
 d74:	0f 90       	pop	r0
 d76:	df 91       	pop	r29
 d78:	cf 91       	pop	r28
 d7a:	1f 91       	pop	r17
 d7c:	0f 91       	pop	r16
 d7e:	ff 90       	pop	r15
 d80:	ef 90       	pop	r14
 d82:	df 90       	pop	r13
 d84:	cf 90       	pop	r12
 d86:	bf 90       	pop	r11
 d88:	af 90       	pop	r10
 d8a:	9f 90       	pop	r9
 d8c:	8f 90       	pop	r8
 d8e:	7f 90       	pop	r7
 d90:	6f 90       	pop	r6
 d92:	08 95       	ret

00000d94 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 d94:	fc 01       	movw	r30, r24
 d96:	39 96       	adiw	r30, 0x09	; 9
 d98:	27 e0       	ldi	r18, 0x07	; 7
 d9a:	df 01       	movw	r26, r30
 d9c:	1d 92       	st	X+, r1
 d9e:	2a 95       	dec	r18
 da0:	e9 f7       	brne	.-6      	; 0xd9c <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 da2:	21 e0       	ldi	r18, 0x01	; 1
 da4:	fc 01       	movw	r30, r24
 da6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
 da8:	24 ef       	ldi	r18, 0xF4	; 244
 daa:	31 e0       	ldi	r19, 0x01	; 1
 dac:	35 87       	std	Z+13, r19	; 0x0d
 dae:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 db0:	23 e0       	ldi	r18, 0x03	; 3
 db2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 db4:	61 e0       	ldi	r22, 0x01	; 1
 db6:	01 96       	adiw	r24, 0x01	; 1
 db8:	de cb       	rjmp	.-2116   	; 0x576 <Endpoint_ConfigureEndpointTable>

00000dba <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 dba:	5f 92       	push	r5
 dbc:	6f 92       	push	r6
 dbe:	7f 92       	push	r7
 dc0:	8f 92       	push	r8
 dc2:	9f 92       	push	r9
 dc4:	af 92       	push	r10
 dc6:	bf 92       	push	r11
 dc8:	cf 92       	push	r12
 dca:	df 92       	push	r13
 dcc:	ef 92       	push	r14
 dce:	ff 92       	push	r15
 dd0:	0f 93       	push	r16
 dd2:	1f 93       	push	r17
 dd4:	cf 93       	push	r28
 dd6:	df 93       	push	r29
 dd8:	00 d0       	rcall	.+0      	; 0xdda <HID_Device_USBTask+0x20>
 dda:	1f 92       	push	r1
 ddc:	cd b7       	in	r28, 0x3d	; 61
 dde:	de b7       	in	r29, 0x3e	; 62
 de0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
 de2:	ad b6       	in	r10, 0x3d	; 61
 de4:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 de6:	8e b3       	in	r24, 0x1e	; 30
 de8:	84 30       	cpi	r24, 0x04	; 4
 dea:	09 f0       	breq	.+2      	; 0xdee <HID_Device_USBTask+0x34>
 dec:	8a c0       	rjmp	.+276    	; 0xf02 <HID_Device_USBTask+0x148>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 dee:	80 91 e4 00 	lds	r24, 0x00E4
 df2:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 df6:	f7 01       	movw	r30, r14
 df8:	22 85       	ldd	r18, Z+10	; 0x0a
 dfa:	33 85       	ldd	r19, Z+11	; 0x0b
 dfc:	28 17       	cp	r18, r24
 dfe:	39 07       	cpc	r19, r25
 e00:	09 f4       	brne	.+2      	; 0xe04 <HID_Device_USBTask+0x4a>
 e02:	7f c0       	rjmp	.+254    	; 0xf02 <HID_Device_USBTask+0x148>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e04:	81 81       	ldd	r24, Z+1	; 0x01
 e06:	8f 70       	andi	r24, 0x0F	; 15
 e08:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e0c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
 e10:	85 ff       	sbrs	r24, 5
 e12:	77 c0       	rjmp	.+238    	; 0xf02 <HID_Device_USBTask+0x148>
 e14:	8d b6       	in	r8, 0x3d	; 61
 e16:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 e18:	40 85       	ldd	r20, Z+8	; 0x08
 e1a:	50 e0       	ldi	r21, 0x00	; 0
 e1c:	8d b7       	in	r24, 0x3d	; 61
 e1e:	9e b7       	in	r25, 0x3e	; 62
 e20:	84 1b       	sub	r24, r20
 e22:	95 0b       	sbc	r25, r21
 e24:	0f b6       	in	r0, 0x3f	; 63
 e26:	f8 94       	cli
 e28:	9e bf       	out	0x3e, r25	; 62
 e2a:	0f be       	out	0x3f, r0	; 63
 e2c:	8d bf       	out	0x3d, r24	; 61
 e2e:	ed b7       	in	r30, 0x3d	; 61
 e30:	fe b7       	in	r31, 0x3e	; 62
 e32:	31 96       	adiw	r30, 0x01	; 1
 e34:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 e36:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 e38:	1a 82       	std	Y+2, r1	; 0x02
 e3a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 e3c:	60 e0       	ldi	r22, 0x00	; 0
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	cf 01       	movw	r24, r30
 e42:	8d d0       	rcall	.+282    	; 0xf5e <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 e44:	8e 01       	movw	r16, r28
 e46:	0f 5f       	subi	r16, 0xFF	; 255
 e48:	1f 4f       	sbci	r17, 0xFF	; 255
 e4a:	96 01       	movw	r18, r12
 e4c:	40 e0       	ldi	r20, 0x00	; 0
 e4e:	be 01       	movw	r22, r28
 e50:	6d 5f       	subi	r22, 0xFD	; 253
 e52:	7f 4f       	sbci	r23, 0xFF	; 255
 e54:	c7 01       	movw	r24, r14
 e56:	b9 d9       	rcall	.-3214   	; 0x1ca <CALLBACK_HID_Device_CreateHIDReport>
 e58:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 e5a:	f7 01       	movw	r30, r14
 e5c:	84 85       	ldd	r24, Z+12	; 0x0c
 e5e:	95 85       	ldd	r25, Z+13	; 0x0d
 e60:	89 2b       	or	r24, r25
 e62:	41 f0       	breq	.+16     	; 0xe74 <HID_Device_USBTask+0xba>
 e64:	21 e0       	ldi	r18, 0x01	; 1
 e66:	86 85       	ldd	r24, Z+14	; 0x0e
 e68:	97 85       	ldd	r25, Z+15	; 0x0f
 e6a:	89 2b       	or	r24, r25
 e6c:	09 f0       	breq	.+2      	; 0xe70 <HID_Device_USBTask+0xb6>
 e6e:	20 e0       	ldi	r18, 0x00	; 0
 e70:	72 2e       	mov	r7, r18
 e72:	01 c0       	rjmp	.+2      	; 0xe76 <HID_Device_USBTask+0xbc>
 e74:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 e76:	f7 01       	movw	r30, r14
 e78:	06 81       	ldd	r16, Z+6	; 0x06
 e7a:	17 81       	ldd	r17, Z+7	; 0x07
 e7c:	01 15       	cp	r16, r1
 e7e:	11 05       	cpc	r17, r1
 e80:	89 f0       	breq	.+34     	; 0xea4 <HID_Device_USBTask+0xea>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 e82:	49 81       	ldd	r20, Y+1	; 0x01
 e84:	5a 81       	ldd	r21, Y+2	; 0x02
 e86:	b8 01       	movw	r22, r16
 e88:	c6 01       	movw	r24, r12
 e8a:	53 d0       	rcall	.+166    	; 0xf32 <memcmp>
 e8c:	55 24       	eor	r5, r5
 e8e:	53 94       	inc	r5
 e90:	89 2b       	or	r24, r25
 e92:	09 f4       	brne	.+2      	; 0xe96 <HID_Device_USBTask+0xdc>
 e94:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 e96:	f7 01       	movw	r30, r14
 e98:	40 85       	ldd	r20, Z+8	; 0x08
 e9a:	50 e0       	ldi	r21, 0x00	; 0
 e9c:	b6 01       	movw	r22, r12
 e9e:	c8 01       	movw	r24, r16
 ea0:	55 d0       	rcall	.+170    	; 0xf4c <memcpy>
 ea2:	01 c0       	rjmp	.+2      	; 0xea6 <HID_Device_USBTask+0xec>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 ea4:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 ea6:	29 81       	ldd	r18, Y+1	; 0x01
 ea8:	3a 81       	ldd	r19, Y+2	; 0x02
 eaa:	23 2b       	or	r18, r19
 eac:	f1 f0       	breq	.+60     	; 0xeea <HID_Device_USBTask+0x130>
 eae:	61 10       	cpse	r6, r1
 eb0:	04 c0       	rjmp	.+8      	; 0xeba <HID_Device_USBTask+0x100>
 eb2:	51 10       	cpse	r5, r1
 eb4:	02 c0       	rjmp	.+4      	; 0xeba <HID_Device_USBTask+0x100>
 eb6:	70 fe       	sbrs	r7, 0
 eb8:	18 c0       	rjmp	.+48     	; 0xeea <HID_Device_USBTask+0x130>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 eba:	f7 01       	movw	r30, r14
 ebc:	84 85       	ldd	r24, Z+12	; 0x0c
 ebe:	95 85       	ldd	r25, Z+13	; 0x0d
 ec0:	97 87       	std	Z+15, r25	; 0x0f
 ec2:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ec4:	81 81       	ldd	r24, Z+1	; 0x01
 ec6:	8f 70       	andi	r24, 0x0F	; 15
 ec8:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
 ecc:	8b 81       	ldd	r24, Y+3	; 0x03
 ece:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ed0:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 ed4:	69 81       	ldd	r22, Y+1	; 0x01
 ed6:	7a 81       	ldd	r23, Y+2	; 0x02
 ed8:	40 e0       	ldi	r20, 0x00	; 0
 eda:	50 e0       	ldi	r21, 0x00	; 0
 edc:	c6 01       	movw	r24, r12
 ede:	d1 d9       	rcall	.-3166   	; 0x282 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ee0:	80 91 e8 00 	lds	r24, 0x00E8
 ee4:	8e 77       	andi	r24, 0x7E	; 126
 ee6:	80 93 e8 00 	sts	0x00E8, r24
 eea:	80 91 e4 00 	lds	r24, 0x00E4
 eee:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 ef2:	f7 01       	movw	r30, r14
 ef4:	93 87       	std	Z+11, r25	; 0x0b
 ef6:	82 87       	std	Z+10, r24	; 0x0a
 ef8:	0f b6       	in	r0, 0x3f	; 63
 efa:	f8 94       	cli
 efc:	9e be       	out	0x3e, r9	; 62
 efe:	0f be       	out	0x3f, r0	; 63
 f00:	8d be       	out	0x3d, r8	; 61
	}
}
 f02:	0f b6       	in	r0, 0x3f	; 63
 f04:	f8 94       	cli
 f06:	be be       	out	0x3e, r11	; 62
 f08:	0f be       	out	0x3f, r0	; 63
 f0a:	ad be       	out	0x3d, r10	; 61
 f0c:	0f 90       	pop	r0
 f0e:	0f 90       	pop	r0
 f10:	0f 90       	pop	r0
 f12:	df 91       	pop	r29
 f14:	cf 91       	pop	r28
 f16:	1f 91       	pop	r17
 f18:	0f 91       	pop	r16
 f1a:	ff 90       	pop	r15
 f1c:	ef 90       	pop	r14
 f1e:	df 90       	pop	r13
 f20:	cf 90       	pop	r12
 f22:	bf 90       	pop	r11
 f24:	af 90       	pop	r10
 f26:	9f 90       	pop	r9
 f28:	8f 90       	pop	r8
 f2a:	7f 90       	pop	r7
 f2c:	6f 90       	pop	r6
 f2e:	5f 90       	pop	r5
 f30:	08 95       	ret

00000f32 <memcmp>:
 f32:	fb 01       	movw	r30, r22
 f34:	dc 01       	movw	r26, r24
 f36:	04 c0       	rjmp	.+8      	; 0xf40 <memcmp+0xe>
 f38:	8d 91       	ld	r24, X+
 f3a:	01 90       	ld	r0, Z+
 f3c:	80 19       	sub	r24, r0
 f3e:	21 f4       	brne	.+8      	; 0xf48 <memcmp+0x16>
 f40:	41 50       	subi	r20, 0x01	; 1
 f42:	50 40       	sbci	r21, 0x00	; 0
 f44:	c8 f7       	brcc	.-14     	; 0xf38 <memcmp+0x6>
 f46:	88 1b       	sub	r24, r24
 f48:	99 0b       	sbc	r25, r25
 f4a:	08 95       	ret

00000f4c <memcpy>:
 f4c:	fb 01       	movw	r30, r22
 f4e:	dc 01       	movw	r26, r24
 f50:	02 c0       	rjmp	.+4      	; 0xf56 <memcpy+0xa>
 f52:	01 90       	ld	r0, Z+
 f54:	0d 92       	st	X+, r0
 f56:	41 50       	subi	r20, 0x01	; 1
 f58:	50 40       	sbci	r21, 0x00	; 0
 f5a:	d8 f7       	brcc	.-10     	; 0xf52 <memcpy+0x6>
 f5c:	08 95       	ret

00000f5e <memset>:
 f5e:	dc 01       	movw	r26, r24
 f60:	01 c0       	rjmp	.+2      	; 0xf64 <memset+0x6>
 f62:	6d 93       	st	X+, r22
 f64:	41 50       	subi	r20, 0x01	; 1
 f66:	50 40       	sbci	r21, 0x00	; 0
 f68:	e0 f7       	brcc	.-8      	; 0xf62 <memset+0x4>
 f6a:	08 95       	ret

00000f6c <_exit>:
 f6c:	f8 94       	cli

00000f6e <__stop_program>:
 f6e:	ff cf       	rjmp	.-2      	; 0xf6e <__stop_program>
