
MedCon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001ee  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f1  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000030f  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ef  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e7  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001aa  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_23>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  6c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  70:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ee ee       	ldi	r30, 0xEE	; 238
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	aa 31       	cpi	r26, 0x1A	; 26
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  9a:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <initUSART>:

//Initialise the USART peripheral
void initUSART(void)
{
	//Utilising USART0
	UBRR1H = UBRRH_VALUE;	//USART Baud Rate Register 1 High -Value defined in util/setbaud.h
  a2:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;	//USART Baud Rate Register 1 Low  -Value defined in util/setbaud.h
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	80 93 cc 00 	sts	0x00CC, r24

	#if USE_2X						//Double-Speed detemined in util/setbaud.h.  Needed is defined BAUD not achieavable without U2X1 
		UCSR1A |= (1 << U2X1);		//UCSR1A = USART 1 Control and Status Register A
	#else							//U2X1 = Double USART 1 Transmission Speed Enable
		UCSR1A &= ~(1 << U2X1);
  ac:	e8 ec       	ldi	r30, 0xC8	; 200
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	80 83       	st	Z, r24
	#endif
	
	UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);		//UCSR1B = USART 1 Control and Status Register B
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c9 00 	sts	0x00C9, r24
																//RXCIE1 = USART 1 RX Complete Interrupt Enable
																//TXEN1 = Transmit Enable USART1
																//RXEN1 = Receive Enable USART1
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);					//UCSR1C = USART 1 Control and Status Register C
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 ca 00 	sts	0x00CA, r24
  c2:	08 95       	ret

000000c4 <receiveByte>:

//Sets a variable to whatever was received by the USART
uint8_t receiveByte(void)
{

	while (!(UCSR1A & (1 << RXC1))) {}		//Wait until the USART 0 receive complete flag is set 
  c4:	80 91 c8 00 	lds	r24, 0x00C8
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <receiveByte>
	return UDR1;							//Returns received data.  UDR0 = USART 0 Data Register
  cc:	80 91 ce 00 	lds	r24, 0x00CE
}
  d0:	08 95       	ret

000000d2 <transmitByte>:


//Transmits a byte from the USART
void transmitByte(uint8_t data)
{
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
  d2:	90 91 c8 00 	lds	r25, 0x00C8
  d6:	95 ff       	sbrs	r25, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <transmitByte>
	UDR1 = data;							//UDR0 = USART 0 Data Register
  da:	80 93 ce 00 	sts	0x00CE, r24
  de:	08 95       	ret

000000e0 <printString>:
}

//Transmits a string of characters.
void printString(const char string[])
{			
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	uint8_t i = 0;								//Counter to increment for every character in the string.
  e8:	10 e0       	ldi	r17, 0x00	; 0
	while ((string[i]) != '\0')				//Until null character (end of string).
  ea:	fe 01       	movw	r30, r28
  ec:	e1 0f       	add	r30, r17
  ee:	f1 1d       	adc	r31, r1
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	21 f0       	breq	.+8      	; 0xfe <printString+0x1e>
	{
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
  f6:	0e 94 69 00 	call	0xd2	; 0xd2 <transmitByte>
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
  fa:	1f 5f       	subi	r17, 0xFF	; 255
  fc:	f6 cf       	rjmp	.-20     	; 0xea <printString+0xa>
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	08 95       	ret

00000106 <printByte>:

//Takes an integer and transmits the characters
void printByte(uint8_t byte)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 10a:	80 91 c8 00 	lds	r24, 0x00C8
 10e:	85 ff       	sbrs	r24, 5
 110:	fc cf       	rjmp	.-8      	; 0x10a <printByte+0x4>
	transmitByte('0'+ ((byte/10) % 10));	//Tens
 112:	2a e0       	ldi	r18, 0x0A	; 10
 114:	8c 2f       	mov	r24, r28
 116:	62 2f       	mov	r22, r18
 118:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodqi4>
 11c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodqi4>
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	89 0f       	add	r24, r25
 124:	0e 94 69 00 	call	0xd2	; 0xd2 <transmitByte>
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 128:	80 91 c8 00 	lds	r24, 0x00C8
 12c:	85 ff       	sbrs	r24, 5
 12e:	fc cf       	rjmp	.-8      	; 0x128 <printByte+0x22>
	transmitByte('0'+ (byte % 10));		//Ones
 130:	8c 2f       	mov	r24, r28
 132:	6a e0       	ldi	r22, 0x0A	; 10
 134:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodqi4>
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	89 0f       	add	r24, r25
}
 13c:	cf 91       	pop	r28
	//while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR1A & (1 << UDRE1))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 13e:	0c 94 69 00 	jmp	0xd2	; 0xd2 <transmitByte>

00000142 <__vector_23>:

#include <MedCon_Support.h>

//Interrupt subroutine triggered whenever the AVR receives a byte on the serial line (USART).  This was used for debugging.
ISR(USART1_RX_vect)	//Interrupt subroutine triggered when the USART receives a byte.
{					
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	transmitByte(receiveByte());	//Echos received byte.
 164:	0e 94 62 00 	call	0xc4	; 0xc4 <receiveByte>
 168:	0e 94 69 00 	call	0xd2	; 0xd2 <transmitByte>
	printString(" Ouch!\r\n");	//Echos received byte.
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 70 00 	call	0xe0	; 0xe0 <printString>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <initClock>:

//The following function initialises the system clock
void initClock(void)
{
	//CLKPR: Clock Prescale Register.  Pre-scale the system clock.  The following setup will disable prescaling so the system clock will be the full 8MHz internal frequency (default is 1MHz).
	CLKPR = (1 << CLKPCE);		//CLKPCE: Clock Prescaler Change Enable.  Must set to one to enable changes to clock prescaler bits.
 196:	e1 e6       	ldi	r30, 0x61	; 97
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
	CLKPR = 0;					//Once CLKPCE is enabled, Clock Prescaler Select Bits can be changed if done within 4 cycles.  In this case, clear all for prescaler value 1 (i.e. 8MHz system).
 19e:	10 82       	st	Z, r1
 1a0:	08 95       	ret

000001a2 <main>:

# include <MedCon_Support.h>

int main(void)
{
	initClock();							//Initialise the system clock.
 1a2:	0e 94 cb 00 	call	0x196	; 0x196 <initClock>
	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
 1a6:	0e 94 51 00 	call	0xa2	; 0xa2 <initUSART>
	printString("\r\n\nGame Over.\r\n");	//Initialisation test for USART.
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 70 00 	call	0xe0	; 0xe0 <printString>
	
	
	sei();									//Global enable interrupts (from avr/interrupt.h)
 1b2:	78 94       	sei



	DDRD |= (1 << PD0);	//Set PD0 to output.
 1b4:	50 9a       	sbi	0x0a, 0	; 10

	while (1)
	{	
		PORTD ^= (1 << PD0);	//XOR bit PD0 (i.e. toggle).
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	89 27       	eor	r24, r25
 1bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	33 ed       	ldi	r19, 0xD3	; 211
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x22>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x2c>
 1ce:	00 00       	nop
 1d0:	f3 cf       	rjmp	.-26     	; 0x1b8 <main+0x16>

000001d2 <__udivmodqi4>:
 1d2:	99 1b       	sub	r25, r25
 1d4:	79 e0       	ldi	r23, 0x09	; 9
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__udivmodqi4_ep>

000001d8 <__udivmodqi4_loop>:
 1d8:	99 1f       	adc	r25, r25
 1da:	96 17       	cp	r25, r22
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__udivmodqi4_ep>
 1de:	96 1b       	sub	r25, r22

000001e0 <__udivmodqi4_ep>:
 1e0:	88 1f       	adc	r24, r24
 1e2:	7a 95       	dec	r23
 1e4:	c9 f7       	brne	.-14     	; 0x1d8 <__udivmodqi4_loop>
 1e6:	80 95       	com	r24
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
